function cov_upkhiy61h(){var path="D:\\Programming\\xyz\\dizy\\src\\test\\DependencyTreeNode.test.js";var hash="ba3f5dc1250e47eca4fab3507ab19c7c6300ec2f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Programming\\xyz\\dizy\\src\\test\\DependencyTreeNode.test.js",statementMap:{"0":{start:{line:6,column:0},end:{line:46,column:3}},"1":{start:{line:7,column:1},end:{line:45,column:4}},"2":{start:{line:8,column:2},end:{line:15,column:5}},"3":{start:{line:9,column:27},end:{line:9,column:57}},"4":{start:{line:9,column:33},end:{line:9,column:57}},"5":{start:{line:10,column:3},end:{line:14,column:5}},"6":{start:{line:17,column:2},end:{line:24,column:5}},"7":{start:{line:18,column:27},end:{line:18,column:97}},"8":{start:{line:18,column:33},end:{line:18,column:97}},"9":{start:{line:19,column:3},end:{line:23,column:5}},"10":{start:{line:26,column:2},end:{line:33,column:5}},"11":{start:{line:27,column:27},end:{line:27,column:106}},"12":{start:{line:27,column:33},end:{line:27,column:106}},"13":{start:{line:28,column:3},end:{line:32,column:5}},"14":{start:{line:35,column:2},end:{line:44,column:5}},"15":{start:{line:36,column:20},end:{line:38,column:5}},"16":{start:{line:40,column:3},end:{line:40,column:48}},"17":{start:{line:41,column:3},end:{line:41,column:42}},"18":{start:{line:42,column:3},end:{line:42,column:36}},"19":{start:{line:43,column:3},end:{line:43,column:44}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:31},end:{line:6,column:32}},loc:{start:{line:6,column:37},end:{line:46,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:7,column:38},end:{line:7,column:39}},loc:{start:{line:7,column:44},end:{line:45,column:2}},line:7},"2":{name:"(anonymous_2)",decl:{start:{line:8,column:72},end:{line:8,column:73}},loc:{start:{line:8,column:78},end:{line:15,column:3}},line:8},"3":{name:"(anonymous_3)",decl:{start:{line:9,column:27},end:{line:9,column:28}},loc:{start:{line:9,column:33},end:{line:9,column:57}},line:9},"4":{name:"(anonymous_4)",decl:{start:{line:17,column:88},end:{line:17,column:89}},loc:{start:{line:17,column:94},end:{line:24,column:3}},line:17},"5":{name:"(anonymous_5)",decl:{start:{line:18,column:27},end:{line:18,column:28}},loc:{start:{line:18,column:33},end:{line:18,column:97}},line:18},"6":{name:"(anonymous_6)",decl:{start:{line:26,column:118},end:{line:26,column:119}},loc:{start:{line:26,column:124},end:{line:33,column:3}},line:26},"7":{name:"(anonymous_7)",decl:{start:{line:27,column:27},end:{line:27,column:28}},loc:{start:{line:27,column:33},end:{line:27,column:106}},line:27},"8":{name:"(anonymous_8)",decl:{start:{line:35,column:89},end:{line:35,column:90}},loc:{start:{line:35,column:95},end:{line:44,column:3}},line:35}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ba3f5dc1250e47eca4fab3507ab19c7c6300ec2f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_upkhiy61h=function(){return actualCoverage;};}return actualCoverage;}cov_upkhiy61h();import{assert}from"chai";import DependencyTreeNode from"../containers/helpers/DependencyTreeNode.js";import DependencyTreeFixture from"./fixtures/DependencyTreeFixture.js";import DIObjectKey from"../containers/helpers/DIObjectKey.js";cov_upkhiy61h().s[0]++;describe("DependencyTreeNode",()=>{cov_upkhiy61h().f[0]++;cov_upkhiy61h().s[1]++;describe("new DependencyTreeNode()",()=>{cov_upkhiy61h().f[1]++;cov_upkhiy61h().s[2]++;it("create DependencyTreeNode without arguments will throw an error",()=>{cov_upkhiy61h().f[2]++;cov_upkhiy61h().s[3]++;const funcThrowsError=()=>{cov_upkhiy61h().f[3]++;cov_upkhiy61h().s[4]++;return new DependencyTreeNode();};cov_upkhiy61h().s[5]++;assert.throws(funcThrowsError,Error,"DependencyTreeNode 'baseClazz' is invalid. Constructor argument 'baseClazz' must be a DIClazz instance.");});cov_upkhiy61h().s[6]++;it("create DependencyTreeNode with 'height' that's not a number will throw an error",()=>{cov_upkhiy61h().f[4]++;cov_upkhiy61h().s[7]++;const funcThrowsError=()=>{cov_upkhiy61h().f[5]++;cov_upkhiy61h().s[8]++;return new DependencyTreeNode(DependencyTreeFixture.baseClazz,"0",[]);};cov_upkhiy61h().s[9]++;assert.throws(funcThrowsError,Error,`DependencyTreeNode 'height' is invalid (type - string). Constructor argument 'height' must be a number`);});cov_upkhiy61h().s[10]++;it("create DependencyTreeNode with 'deps' that's an array of not DependencyTreeNode instances will throw an error",()=>{cov_upkhiy61h().f[6]++;cov_upkhiy61h().s[11]++;const funcThrowsError=()=>{cov_upkhiy61h().f[7]++;cov_upkhiy61h().s[12]++;return new DependencyTreeNode(DependencyTreeFixture.baseClazz,0,[{test:1}]);};cov_upkhiy61h().s[13]++;assert.throws(funcThrowsError,Error,"DependencyTreeNode 'deps' is invalid. Constructor argument 'deps' must be an array of DependencyTreeNode instances.");});cov_upkhiy61h().s[14]++;it("DependencyTreeNode with valid arguments should set it's own properties correctly",()=>{cov_upkhiy61h().f[8]++;const baseNode=(cov_upkhiy61h().s[15]++,new DependencyTreeNode(DependencyTreeFixture.baseClazz,0,[new DependencyTreeNode(DependencyTreeFixture.derivedClazz,1,[])]));// check that all properties have been set correctly like in a DIClazz.test.js
cov_upkhiy61h().s[16]++;assert.instanceOf(baseNode.key,DIObjectKey);cov_upkhiy61h().s[17]++;assert.typeOf(baseNode.name,"string");cov_upkhiy61h().s[18]++;assert.equal(baseNode.height,0);cov_upkhiy61h().s[19]++;assert.equal(baseNode.deps[0].height,1);});});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfdXBraGl5NjFoIiwiYWN0dWFsQ292ZXJhZ2UiLCJhc3NlcnQiLCJEZXBlbmRlbmN5VHJlZU5vZGUiLCJEZXBlbmRlbmN5VHJlZUZpeHR1cmUiLCJESU9iamVjdEtleSIsInMiLCJkZXNjcmliZSIsImYiLCJpdCIsImZ1bmNUaHJvd3NFcnJvciIsInRocm93cyIsIkVycm9yIiwiYmFzZUNsYXp6IiwidGVzdCIsImJhc2VOb2RlIiwiZGVyaXZlZENsYXp6IiwiaW5zdGFuY2VPZiIsImtleSIsInR5cGVPZiIsIm5hbWUiLCJlcXVhbCIsImhlaWdodCIsImRlcHMiXSwic291cmNlcyI6WyJEZXBlbmRlbmN5VHJlZU5vZGUudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiY2hhaVwiO1xyXG5pbXBvcnQgRGVwZW5kZW5jeVRyZWVOb2RlIGZyb20gXCIuLi9jb250YWluZXJzL2hlbHBlcnMvRGVwZW5kZW5jeVRyZWVOb2RlLmpzXCI7XHJcbmltcG9ydCBEZXBlbmRlbmN5VHJlZUZpeHR1cmUgZnJvbSBcIi4vZml4dHVyZXMvRGVwZW5kZW5jeVRyZWVGaXh0dXJlLmpzXCI7XHJcbmltcG9ydCBESU9iamVjdEtleSBmcm9tIFwiLi4vY29udGFpbmVycy9oZWxwZXJzL0RJT2JqZWN0S2V5LmpzXCI7XHJcblxyXG5kZXNjcmliZShcIkRlcGVuZGVuY3lUcmVlTm9kZVwiLCAoKSA9PiB7XHJcblx0ZGVzY3JpYmUoXCJuZXcgRGVwZW5kZW5jeVRyZWVOb2RlKClcIiwgKCkgPT4ge1xyXG5cdFx0aXQoXCJjcmVhdGUgRGVwZW5kZW5jeVRyZWVOb2RlIHdpdGhvdXQgYXJndW1lbnRzIHdpbGwgdGhyb3cgYW4gZXJyb3JcIiwgKCkgPT4ge1xyXG5cdFx0XHRjb25zdCBmdW5jVGhyb3dzRXJyb3IgPSAoKSA9PiBuZXcgRGVwZW5kZW5jeVRyZWVOb2RlKCk7XHJcblx0XHRcdGFzc2VydC50aHJvd3MoXHJcblx0XHRcdFx0ZnVuY1Rocm93c0Vycm9yLFxyXG5cdFx0XHRcdEVycm9yLFxyXG5cdFx0XHRcdFwiRGVwZW5kZW5jeVRyZWVOb2RlICdiYXNlQ2xhenonIGlzIGludmFsaWQuIENvbnN0cnVjdG9yIGFyZ3VtZW50ICdiYXNlQ2xhenonIG11c3QgYmUgYSBESUNsYXp6IGluc3RhbmNlLlwiLFxyXG5cdFx0XHQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0aXQoXCJjcmVhdGUgRGVwZW5kZW5jeVRyZWVOb2RlIHdpdGggJ2hlaWdodCcgdGhhdCdzIG5vdCBhIG51bWJlciB3aWxsIHRocm93IGFuIGVycm9yXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgZnVuY1Rocm93c0Vycm9yID0gKCkgPT4gbmV3IERlcGVuZGVuY3lUcmVlTm9kZShEZXBlbmRlbmN5VHJlZUZpeHR1cmUuYmFzZUNsYXp6LCBcIjBcIiwgW10pO1xyXG5cdFx0XHRhc3NlcnQudGhyb3dzKFxyXG5cdFx0XHRcdGZ1bmNUaHJvd3NFcnJvcixcclxuXHRcdFx0XHRFcnJvcixcclxuXHRcdFx0XHRgRGVwZW5kZW5jeVRyZWVOb2RlICdoZWlnaHQnIGlzIGludmFsaWQgKHR5cGUgLSBzdHJpbmcpLiBDb25zdHJ1Y3RvciBhcmd1bWVudCAnaGVpZ2h0JyBtdXN0IGJlIGEgbnVtYmVyYCxcclxuXHRcdFx0KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGl0KFwiY3JlYXRlIERlcGVuZGVuY3lUcmVlTm9kZSB3aXRoICdkZXBzJyB0aGF0J3MgYW4gYXJyYXkgb2Ygbm90IERlcGVuZGVuY3lUcmVlTm9kZSBpbnN0YW5jZXMgd2lsbCB0aHJvdyBhbiBlcnJvclwiLCAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGZ1bmNUaHJvd3NFcnJvciA9ICgpID0+IG5ldyBEZXBlbmRlbmN5VHJlZU5vZGUoRGVwZW5kZW5jeVRyZWVGaXh0dXJlLmJhc2VDbGF6eiwgMCwgW3sgdGVzdDogMSB9XSk7XHJcblx0XHRcdGFzc2VydC50aHJvd3MoXHJcblx0XHRcdFx0ZnVuY1Rocm93c0Vycm9yLFxyXG5cdFx0XHRcdEVycm9yLFxyXG5cdFx0XHRcdFwiRGVwZW5kZW5jeVRyZWVOb2RlICdkZXBzJyBpcyBpbnZhbGlkLiBDb25zdHJ1Y3RvciBhcmd1bWVudCAnZGVwcycgbXVzdCBiZSBhbiBhcnJheSBvZiBEZXBlbmRlbmN5VHJlZU5vZGUgaW5zdGFuY2VzLlwiLFxyXG5cdFx0XHQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0aXQoXCJEZXBlbmRlbmN5VHJlZU5vZGUgd2l0aCB2YWxpZCBhcmd1bWVudHMgc2hvdWxkIHNldCBpdCdzIG93biBwcm9wZXJ0aWVzIGNvcnJlY3RseVwiLCAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGJhc2VOb2RlID0gbmV3IERlcGVuZGVuY3lUcmVlTm9kZShEZXBlbmRlbmN5VHJlZUZpeHR1cmUuYmFzZUNsYXp6LCAwLCBbXHJcblx0XHRcdFx0bmV3IERlcGVuZGVuY3lUcmVlTm9kZShEZXBlbmRlbmN5VHJlZUZpeHR1cmUuZGVyaXZlZENsYXp6LCAxLCBbXSksXHJcblx0XHRcdF0pO1xyXG5cdFx0XHQvLyBjaGVjayB0aGF0IGFsbCBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBzZXQgY29ycmVjdGx5IGxpa2UgaW4gYSBESUNsYXp6LnRlc3QuanNcclxuXHRcdFx0YXNzZXJ0Lmluc3RhbmNlT2YoYmFzZU5vZGUua2V5LCBESU9iamVjdEtleSk7XHJcblx0XHRcdGFzc2VydC50eXBlT2YoYmFzZU5vZGUubmFtZSwgXCJzdHJpbmdcIik7XHJcblx0XHRcdGFzc2VydC5lcXVhbChiYXNlTm9kZS5oZWlnaHQsIDApO1xyXG5cdFx0XHRhc3NlcnQuZXF1YWwoYmFzZU5vZGUuZGVwc1swXS5oZWlnaHQsIDEpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJvcEdBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlosT0FBU0UsTUFBTSxLQUFRLE1BQU0sQ0FDN0IsTUFBTyxDQUFBQyxrQkFBa0IsS0FBTSw2Q0FBNkMsQ0FDNUUsTUFBTyxDQUFBQyxxQkFBcUIsS0FBTSxxQ0FBcUMsQ0FDdkUsTUFBTyxDQUFBQyxXQUFXLEtBQU0sc0NBQXNDLENBQUNMLGFBQUEsR0FBQU0sQ0FBQSxNQUUvREMsUUFBUSxDQUFDLG9CQUFvQixDQUFFLElBQU0sQ0FBQVAsYUFBQSxHQUFBUSxDQUFBLE1BQUFSLGFBQUEsR0FBQU0sQ0FBQSxNQUNwQ0MsUUFBUSxDQUFDLDBCQUEwQixDQUFFLElBQU0sQ0FBQVAsYUFBQSxHQUFBUSxDQUFBLE1BQUFSLGFBQUEsR0FBQU0sQ0FBQSxNQUMxQ0csRUFBRSxDQUFDLGlFQUFpRSxDQUFFLElBQU0sQ0FBQVQsYUFBQSxHQUFBUSxDQUFBLE1BQUFSLGFBQUEsR0FBQU0sQ0FBQSxNQUMzRSxLQUFNLENBQUFJLGVBQWUsQ0FBR0EsQ0FBQSxHQUFNLENBQUFWLGFBQUEsR0FBQVEsQ0FBQSxNQUFBUixhQUFBLEdBQUFNLENBQUEsZ0JBQUksQ0FBQUgsa0JBQWtCLENBQUMsQ0FBQyxDQUFELENBQUMsQ0FBQ0gsYUFBQSxHQUFBTSxDQUFBLE1BQ3ZESixNQUFNLENBQUNTLE1BQU0sQ0FDWkQsZUFBZSxDQUNmRSxLQUFLLENBQ0wseUdBQ0QsQ0FBQyxDQUNGLENBQUMsQ0FBQyxDQUFDWixhQUFBLEdBQUFNLENBQUEsTUFFSEcsRUFBRSxDQUFDLGlGQUFpRixDQUFFLElBQU0sQ0FBQVQsYUFBQSxHQUFBUSxDQUFBLE1BQUFSLGFBQUEsR0FBQU0sQ0FBQSxNQUMzRixLQUFNLENBQUFJLGVBQWUsQ0FBR0EsQ0FBQSxHQUFNLENBQUFWLGFBQUEsR0FBQVEsQ0FBQSxNQUFBUixhQUFBLEdBQUFNLENBQUEsZ0JBQUksQ0FBQUgsa0JBQWtCLENBQUNDLHFCQUFxQixDQUFDUyxTQUFTLENBQUUsR0FBRyxDQUFFLEVBQUUsQ0FBQyxDQUFELENBQUMsQ0FBQ2IsYUFBQSxHQUFBTSxDQUFBLE1BQy9GSixNQUFNLENBQUNTLE1BQU0sQ0FDWkQsZUFBZSxDQUNmRSxLQUFLLENBQ0osd0dBQ0YsQ0FBQyxDQUNGLENBQUMsQ0FBQyxDQUFDWixhQUFBLEdBQUFNLENBQUEsT0FFSEcsRUFBRSxDQUFDLCtHQUErRyxDQUFFLElBQU0sQ0FBQVQsYUFBQSxHQUFBUSxDQUFBLE1BQUFSLGFBQUEsR0FBQU0sQ0FBQSxPQUN6SCxLQUFNLENBQUFJLGVBQWUsQ0FBR0EsQ0FBQSxHQUFNLENBQUFWLGFBQUEsR0FBQVEsQ0FBQSxNQUFBUixhQUFBLEdBQUFNLENBQUEsaUJBQUksQ0FBQUgsa0JBQWtCLENBQUNDLHFCQUFxQixDQUFDUyxTQUFTLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRUMsSUFBSSxDQUFFLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFDLENBQUNkLGFBQUEsR0FBQU0sQ0FBQSxPQUN4R0osTUFBTSxDQUFDUyxNQUFNLENBQ1pELGVBQWUsQ0FDZkUsS0FBSyxDQUNMLHFIQUNELENBQUMsQ0FDRixDQUFDLENBQUMsQ0FBQ1osYUFBQSxHQUFBTSxDQUFBLE9BRUhHLEVBQUUsQ0FBQyxrRkFBa0YsQ0FBRSxJQUFNLENBQUFULGFBQUEsR0FBQVEsQ0FBQSxNQUM1RixLQUFNLENBQUFPLFFBQVEsRUFBQWYsYUFBQSxHQUFBTSxDQUFBLE9BQUcsR0FBSSxDQUFBSCxrQkFBa0IsQ0FBQ0MscUJBQXFCLENBQUNTLFNBQVMsQ0FBRSxDQUFDLENBQUUsQ0FDM0UsR0FBSSxDQUFBVixrQkFBa0IsQ0FBQ0MscUJBQXFCLENBQUNZLFlBQVksQ0FBRSxDQUFDLENBQUUsRUFBRSxDQUFDLENBQ2pFLENBQUMsRUFDRjtBQUFBaEIsYUFBQSxHQUFBTSxDQUFBLE9BQ0FKLE1BQU0sQ0FBQ2UsVUFBVSxDQUFDRixRQUFRLENBQUNHLEdBQUcsQ0FBRWIsV0FBVyxDQUFDLENBQUNMLGFBQUEsR0FBQU0sQ0FBQSxPQUM3Q0osTUFBTSxDQUFDaUIsTUFBTSxDQUFDSixRQUFRLENBQUNLLElBQUksQ0FBRSxRQUFRLENBQUMsQ0FBQ3BCLGFBQUEsR0FBQU0sQ0FBQSxPQUN2Q0osTUFBTSxDQUFDbUIsS0FBSyxDQUFDTixRQUFRLENBQUNPLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQ3RCLGFBQUEsR0FBQU0sQ0FBQSxPQUNqQ0osTUFBTSxDQUFDbUIsS0FBSyxDQUFDTixRQUFRLENBQUNRLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQ0QsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUN6QyxDQUFDLENBQUMsQ0FDSCxDQUFDLENBQUMsQ0FDSCxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=