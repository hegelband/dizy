function cov_um1svtvdq(){var path="D:\\Programming\\xyz\\dizy\\src\\test\\SessionContainer.test.js";var hash="b024b356c5654ca85133e9a53edb4e534a27e483";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Programming\\xyz\\dizy\\src\\test\\SessionContainer.test.js",statementMap:{"0":{start:{line:10,column:0},end:{line:144,column:3}},"1":{start:{line:11,column:1},end:{line:26,column:4}},"2":{start:{line:12,column:2},end:{line:25,column:4}},"3":{start:{line:17,column:28},end:{line:17,column:56}},"4":{start:{line:17,column:34},end:{line:17,column:56}},"5":{start:{line:18,column:4},end:{line:23,column:6}},"6":{start:{line:28,column:1},end:{line:39,column:4}},"7":{start:{line:29,column:2},end:{line:38,column:5}},"8":{start:{line:30,column:27},end:{line:30,column:84}},"9":{start:{line:30,column:33},end:{line:30,column:84}},"10":{start:{line:31,column:3},end:{line:36,column:5}},"11":{start:{line:37,column:3},end:{line:37,column:57}},"12":{start:{line:41,column:1},end:{line:52,column:4}},"13":{start:{line:42,column:2},end:{line:51,column:5}},"14":{start:{line:43,column:27},end:{line:44,column:113}},"15":{start:{line:44,column:4},end:{line:44,column:113}},"16":{start:{line:45,column:3},end:{line:50,column:5}},"17":{start:{line:54,column:1},end:{line:69,column:4}},"18":{start:{line:55,column:2},end:{line:68,column:4}},"19":{start:{line:60,column:28},end:{line:60,column:113}},"20":{start:{line:60,column:34},end:{line:60,column:113}},"21":{start:{line:61,column:4},end:{line:66,column:6}},"22":{start:{line:71,column:1},end:{line:83,column:4}},"23":{start:{line:72,column:2},end:{line:82,column:5}},"24":{start:{line:73,column:22},end:{line:76,column:4}},"25":{start:{line:77,column:19},end:{line:77,column:90}},"26":{start:{line:78,column:3},end:{line:78,column:18}},"27":{start:{line:79,column:24},end:{line:79,column:65}},"28":{start:{line:80,column:20},end:{line:80,column:84}},"29":{start:{line:81,column:3},end:{line:81,column:37}},"30":{start:{line:85,column:1},end:{line:115,column:4}},"31":{start:{line:86,column:21},end:{line:89,column:3}},"32":{start:{line:90,column:18},end:{line:90,column:89}},"33":{start:{line:91,column:2},end:{line:91,column:17}},"34":{start:{line:92,column:23},end:{line:92,column:64}},"35":{start:{line:93,column:2},end:{line:93,column:22}},"36":{start:{line:94,column:19},end:{line:94,column:83}},"37":{start:{line:96,column:2},end:{line:100,column:5}},"38":{start:{line:97,column:3},end:{line:99,column:6}},"39":{start:{line:98,column:4},end:{line:98,column:125}},"40":{start:{line:102,column:2},end:{line:107,column:5}},"41":{start:{line:103,column:3},end:{line:106,column:6}},"42":{start:{line:104,column:27},end:{line:104,column:91}},"43":{start:{line:105,column:4},end:{line:105,column:43}},"44":{start:{line:109,column:2},end:{line:114,column:5}},"45":{start:{line:110,column:3},end:{line:113,column:6}},"46":{start:{line:111,column:23},end:{line:111,column:56}},"47":{start:{line:112,column:4},end:{line:112,column:40}},"48":{start:{line:117,column:1},end:{line:135,column:4}},"49":{start:{line:118,column:18},end:{line:118,column:47}},"50":{start:{line:119,column:2},end:{line:119,column:17}},"51":{start:{line:120,column:23},end:{line:123,column:3}},"52":{start:{line:122,column:45},end:{line:122,column:100}},"53":{start:{line:125,column:2},end:{line:128,column:5}},"54":{start:{line:126,column:27},end:{line:126,column:119}},"55":{start:{line:126,column:33},end:{line:126,column:119}},"56":{start:{line:127,column:3},end:{line:127,column:119}},"57":{start:{line:130,column:2},end:{line:134,column:5}},"58":{start:{line:131,column:27},end:{line:132,column:117}},"59":{start:{line:132,column:4},end:{line:132,column:117}},"60":{start:{line:133,column:3},end:{line:133,column:47}},"61":{start:{line:137,column:1},end:{line:143,column:4}},"62":{start:{line:138,column:2},end:{line:142,column:5}},"63":{start:{line:139,column:19},end:{line:139,column:48}},"64":{start:{line:140,column:24},end:{line:140,column:53}},"65":{start:{line:141,column:3},end:{line:141,column:55}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:29},end:{line:10,column:30}},loc:{start:{line:10,column:35},end:{line:144,column:1}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:11,column:36},end:{line:11,column:37}},loc:{start:{line:11,column:42},end:{line:26,column:2}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:16,column:3},end:{line:16,column:4}},loc:{start:{line:16,column:9},end:{line:24,column:4}},line:16},"3":{name:"(anonymous_3)",decl:{start:{line:17,column:28},end:{line:17,column:29}},loc:{start:{line:17,column:34},end:{line:17,column:56}},line:17},"4":{name:"(anonymous_4)",decl:{start:{line:28,column:43},end:{line:28,column:44}},loc:{start:{line:28,column:49},end:{line:39,column:2}},line:28},"5":{name:"(anonymous_5)",decl:{start:{line:29,column:81},end:{line:29,column:82}},loc:{start:{line:29,column:87},end:{line:38,column:3}},line:29},"6":{name:"(anonymous_6)",decl:{start:{line:30,column:27},end:{line:30,column:28}},loc:{start:{line:30,column:33},end:{line:30,column:84}},line:30},"7":{name:"(anonymous_7)",decl:{start:{line:41,column:75},end:{line:41,column:76}},loc:{start:{line:41,column:81},end:{line:52,column:2}},line:41},"8":{name:"(anonymous_8)",decl:{start:{line:42,column:43},end:{line:42,column:44}},loc:{start:{line:42,column:49},end:{line:51,column:3}},line:42},"9":{name:"(anonymous_9)",decl:{start:{line:43,column:27},end:{line:43,column:28}},loc:{start:{line:44,column:4},end:{line:44,column:113}},line:44},"10":{name:"(anonymous_10)",decl:{start:{line:54,column:71},end:{line:54,column:72}},loc:{start:{line:54,column:77},end:{line:69,column:2}},line:54},"11":{name:"(anonymous_11)",decl:{start:{line:59,column:3},end:{line:59,column:4}},loc:{start:{line:59,column:9},end:{line:67,column:4}},line:59},"12":{name:"(anonymous_12)",decl:{start:{line:60,column:28},end:{line:60,column:29}},loc:{start:{line:60,column:34},end:{line:60,column:113}},line:60},"13":{name:"(anonymous_13)",decl:{start:{line:71,column:116},end:{line:71,column:117}},loc:{start:{line:71,column:122},end:{line:83,column:2}},line:71},"14":{name:"(anonymous_14)",decl:{start:{line:72,column:32},end:{line:72,column:33}},loc:{start:{line:72,column:38},end:{line:82,column:3}},line:72},"15":{name:"(anonymous_15)",decl:{start:{line:85,column:74},end:{line:85,column:75}},loc:{start:{line:85,column:80},end:{line:115,column:2}},line:85},"16":{name:"(anonymous_16)",decl:{start:{line:96,column:81},end:{line:96,column:82}},loc:{start:{line:96,column:87},end:{line:100,column:3}},line:96},"17":{name:"(anonymous_17)",decl:{start:{line:97,column:46},end:{line:97,column:47}},loc:{start:{line:97,column:52},end:{line:99,column:4}},line:97},"18":{name:"(anonymous_18)",decl:{start:{line:102,column:96},end:{line:102,column:97}},loc:{start:{line:102,column:102},end:{line:107,column:3}},line:102},"19":{name:"(anonymous_19)",decl:{start:{line:103,column:55},end:{line:103,column:56}},loc:{start:{line:103,column:61},end:{line:106,column:4}},line:103},"20":{name:"(anonymous_20)",decl:{start:{line:109,column:85},end:{line:109,column:86}},loc:{start:{line:109,column:91},end:{line:114,column:3}},line:109},"21":{name:"(anonymous_21)",decl:{start:{line:110,column:33},end:{line:110,column:34}},loc:{start:{line:110,column:39},end:{line:113,column:4}},line:110},"22":{name:"(anonymous_22)",decl:{start:{line:117,column:66},end:{line:117,column:67}},loc:{start:{line:117,column:72},end:{line:135,column:2}},line:117},"23":{name:"(anonymous_23)",decl:{start:{line:122,column:32},end:{line:122,column:33}},loc:{start:{line:122,column:45},end:{line:122,column:100}},line:122},"24":{name:"(anonymous_24)",decl:{start:{line:125,column:107},end:{line:125,column:108}},loc:{start:{line:125,column:113},end:{line:128,column:3}},line:125},"25":{name:"(anonymous_25)",decl:{start:{line:126,column:27},end:{line:126,column:28}},loc:{start:{line:126,column:33},end:{line:126,column:119}},line:126},"26":{name:"(anonymous_26)",decl:{start:{line:130,column:50},end:{line:130,column:51}},loc:{start:{line:130,column:56},end:{line:134,column:3}},line:130},"27":{name:"(anonymous_27)",decl:{start:{line:131,column:27},end:{line:131,column:28}},loc:{start:{line:132,column:4},end:{line:132,column:117}},line:132},"28":{name:"(anonymous_28)",decl:{start:{line:137,column:42},end:{line:137,column:43}},loc:{start:{line:137,column:48},end:{line:143,column:2}},line:137},"29":{name:"(anonymous_29)",decl:{start:{line:138,column:30},end:{line:138,column:31}},loc:{start:{line:138,column:36},end:{line:142,column:3}},line:138}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b024b356c5654ca85133e9a53edb4e534a27e483"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_um1svtvdq=function(){return actualCoverage;};}return actualCoverage;}cov_um1svtvdq();import{assert}from"chai";import DependencyTreeFixture from"./fixtures/DependencyTreeFixture.js";import DependencyTree from"../containers/helpers/DependencyTree.js";import DependencyTreeNode from"../containers/helpers/DependencyTreeNode.js";import SessionContainer from"../containers/SessionContainer.js";// import ContextContainer from "../containers/ContextContainer.js";
import ContextContainerFactory from"../containers/ContextContainerFactory.js";import LifecycleEnum from"../constants/LifecycleEnum.js";cov_um1svtvdq().s[0]++;describe("SessionContainer",()=>{cov_um1svtvdq().f[0]++;cov_um1svtvdq().s[1]++;describe("new SessionContainer()",()=>{cov_um1svtvdq().f[1]++;cov_um1svtvdq().s[2]++;it("should throw an error "+"'Invalid simple container parent. "+"Parent must be an instance of AbstractContextContainer or it's derived class, null or undefined.'",()=>{cov_um1svtvdq().f[2]++;cov_um1svtvdq().s[3]++;const funcThrowsError=()=>{cov_um1svtvdq().f[3]++;cov_um1svtvdq().s[4]++;return new SessionContainer();};cov_um1svtvdq().s[5]++;assert.throws(funcThrowsError,Error,"Invalid simple container parent. "+"Parent must be an instance of AbstractContextContainer or it's derived class, null or undefined.");});});cov_um1svtvdq().s[6]++;describe("new SessionContainer(context)",()=>{cov_um1svtvdq().f[4]++;cov_um1svtvdq().s[7]++;it("should not throw an error; classTreeList defined with default value = []",()=>{cov_um1svtvdq().f[5]++;cov_um1svtvdq().s[8]++;const funcThrowsError=()=>{cov_um1svtvdq().f[6]++;cov_um1svtvdq().s[9]++;return new SessionContainer(DependencyTreeFixture.context);};cov_um1svtvdq().s[10]++;assert.doesNotThrow(funcThrowsError,Error,"DIContainer constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances");cov_um1svtvdq().s[11]++;assert.deepEqual(funcThrowsError().classTreeList,[]);});});cov_um1svtvdq().s[12]++;describe("new SessionContainer(context, [new DependencyTree(baseNode)])",()=>{cov_um1svtvdq().f[7]++;cov_um1svtvdq().s[13]++;it("should set classTreeList correctly",()=>{cov_um1svtvdq().f[8]++;cov_um1svtvdq().s[14]++;const funcThrowsError=()=>{cov_um1svtvdq().f[9]++;cov_um1svtvdq().s[15]++;return new SessionContainer(DependencyTreeFixture.context,[new DependencyTree(DependencyTreeFixture.sessionANode)]);};cov_um1svtvdq().s[16]++;assert.doesNotThrow(funcThrowsError,Error,"DIContainer constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances");});});cov_um1svtvdq().s[17]++;describe("new SessionContainer(context, [{ test: 1 }, { test: 2 }])",()=>{cov_um1svtvdq().f[10]++;cov_um1svtvdq().s[18]++;it("should throw an error "+"'DIContainer constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances'",()=>{cov_um1svtvdq().f[11]++;cov_um1svtvdq().s[19]++;const funcThrowsError=()=>{cov_um1svtvdq().f[12]++;cov_um1svtvdq().s[20]++;return new SessionContainer(DependencyTreeFixture.context,[{test:1},{test:2}]);};cov_um1svtvdq().s[21]++;assert.throws(funcThrowsError,Error,"DIContainer constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances");});});cov_um1svtvdq().s[22]++;describe("SessionContainer.getInstance(key of di object from this container) before SessionContainer initialized",()=>{cov_um1svtvdq().f[13]++;cov_um1svtvdq().s[23]++;it("should return undefined",()=>{cov_um1svtvdq().f[14]++;const clazzTrees=(cov_um1svtvdq().s[24]++,[new DependencyTree(DependencyTreeFixture.sessionANode),new DependencyTree(new DependencyTreeNode(DependencyTreeFixture.sessionBClazz,0,[]))]);const context=(cov_um1svtvdq().s[25]++,ContextContainerFactory.createContainer(DependencyTreeFixture.diConfig));cov_um1svtvdq().s[26]++;context.init();const sessionScope=(cov_um1svtvdq().s[27]++,new SessionContainer(context,clazzTrees));const instance=(cov_um1svtvdq().s[28]++,sessionScope.getInstance(DependencyTreeFixture.sessionANode.key));cov_um1svtvdq().s[29]++;assert.equal(instance,undefined);});});cov_um1svtvdq().s[30]++;describe("SessionContainer.getInstance() after SessionContainer.init()",()=>{cov_um1svtvdq().f[15]++;const clazzTrees=(cov_um1svtvdq().s[31]++,[new DependencyTree(DependencyTreeFixture.sessionANode),new DependencyTree(new DependencyTreeNode(DependencyTreeFixture.sessionBClazz,0,[]))]);const context=(cov_um1svtvdq().s[32]++,ContextContainerFactory.createContainer(DependencyTreeFixture.diConfig));cov_um1svtvdq().s[33]++;context.init();const sessionScope=(cov_um1svtvdq().s[34]++,new SessionContainer(context,clazzTrees));cov_um1svtvdq().s[35]++;sessionScope.init();const instance=(cov_um1svtvdq().s[36]++,sessionScope.getInstance(DependencyTreeFixture.sessionANode.key));cov_um1svtvdq().s[37]++;describe("SessionContainer.getInstance(key of di object from this container)",()=>{cov_um1svtvdq().f[16]++;cov_um1svtvdq().s[38]++;it(`should return an instance of class A`,()=>{cov_um1svtvdq().f[17]++;cov_um1svtvdq().s[39]++;assert.deepEqual(instance,new DependencyTreeFixture.sessionAClazz.type(new DependencyTreeFixture.sessionBClazz.type()));});});cov_um1svtvdq().s[40]++;describe("call SessionContainer.getInstance(key of di object from this container) two times",()=>{cov_um1svtvdq().f[18]++;cov_um1svtvdq().s[41]++;it(`should return the same instance for each call`,()=>{cov_um1svtvdq().f[19]++;const secondInstance=(cov_um1svtvdq().s[42]++,sessionScope.getInstance(DependencyTreeFixture.sessionANode.key));cov_um1svtvdq().s[43]++;assert.equal(instance,secondInstance);});});cov_um1svtvdq().s[44]++;describe("SessionContainer.getInstance(key that doesn't exist in this container)",()=>{cov_um1svtvdq().f[20]++;cov_um1svtvdq().s[45]++;it(`should return undefined`,()=>{cov_um1svtvdq().f[21]++;const noInstance=(cov_um1svtvdq().s[46]++,sessionScope.getInstance("noKey"));cov_um1svtvdq().s[47]++;assert.equal(noInstance,undefined);});});});cov_um1svtvdq().s[48]++;describe("SessionContainer._addInstance('stringKey', instance)",()=>{cov_um1svtvdq().f[22]++;const context=(cov_um1svtvdq().s[49]++,DependencyTreeFixture.context);cov_um1svtvdq().s[50]++;context.init();const sessionScope=(cov_um1svtvdq().s[51]++,new SessionContainer(context,context.classTreeList.filter(clsTree=>{cov_um1svtvdq().f[23]++;cov_um1svtvdq().s[52]++;return clsTree.baseNode.lifecycle.id===LifecycleEnum.Session;})));cov_um1svtvdq().s[53]++;it("should throw an error 'Invalid key type. Argument 'key' must be an instance of DIObjectKey class.'",()=>{cov_um1svtvdq().f[24]++;cov_um1svtvdq().s[54]++;const funcThrowsError=()=>{cov_um1svtvdq().f[25]++;cov_um1svtvdq().s[55]++;return sessionScope._addInstance("stringKey",new DependencyTreeFixture.sessionBClazz.type());};cov_um1svtvdq().s[56]++;assert.throws(funcThrowsError,Error,`Invalid key type. Argument 'key' must be an instance of DIObjectKey class.`);});cov_um1svtvdq().s[57]++;it("should add an instance (error not thrown)",()=>{cov_um1svtvdq().f[26]++;cov_um1svtvdq().s[58]++;const funcThrowsError=()=>{cov_um1svtvdq().f[27]++;cov_um1svtvdq().s[59]++;return sessionScope._addInstance(DependencyTreeFixture.sessionBNode.key,new DependencyTreeFixture.sessionBClazz.type());};cov_um1svtvdq().s[60]++;assert.doesNotThrow(funcThrowsError,Error);});});cov_um1svtvdq().s[61]++;describe("SessionContainer.getParent()",()=>{cov_um1svtvdq().f[28]++;cov_um1svtvdq().s[62]++;it("should return context",()=>{cov_um1svtvdq().f[29]++;const context=(cov_um1svtvdq().s[63]++,DependencyTreeFixture.context);const sessionScope=(cov_um1svtvdq().s[64]++,new SessionContainer(context));cov_um1svtvdq().s[65]++;assert.deepEqual(sessionScope.getParent(),context);});});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,