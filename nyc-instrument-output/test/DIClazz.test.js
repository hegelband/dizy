function cov_1vjwxqx14d(){var path="D:\\Programming\\xyz\\dizy\\src\\test\\DIClazz.test.js";var hash="ad346025fd36075bf15f215c29bb30cbeed56ef1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Programming\\xyz\\dizy\\src\\test\\DIClazz.test.js",statementMap:{"0":{start:{line:5,column:0},end:{line:129,column:3}},"1":{start:{line:6,column:1},end:{line:27,column:4}},"2":{start:{line:7,column:2},end:{line:26,column:4}},"3":{start:{line:11,column:28},end:{line:19,column:6}},"4":{start:{line:12,column:5},end:{line:19,column:6}},"5":{start:{line:20,column:4},end:{line:24,column:6}},"6":{start:{line:29,column:1},end:{line:45,column:4}},"7":{start:{line:30,column:2},end:{line:44,column:4}},"8":{start:{line:33,column:28},end:{line:41,column:6}},"9":{start:{line:34,column:5},end:{line:41,column:6}},"10":{start:{line:42,column:4},end:{line:42,column:132}},"11":{start:{line:47,column:1},end:{line:68,column:4}},"12":{start:{line:48,column:2},end:{line:67,column:4}},"13":{start:{line:52,column:28},end:{line:60,column:6}},"14":{start:{line:53,column:5},end:{line:60,column:6}},"15":{start:{line:61,column:4},end:{line:65,column:6}},"16":{start:{line:70,column:1},end:{line:90,column:4}},"17":{start:{line:71,column:2},end:{line:89,column:4}},"18":{start:{line:74,column:28},end:{line:82,column:6}},"19":{start:{line:75,column:5},end:{line:82,column:6}},"20":{start:{line:83,column:4},end:{line:87,column:6}},"21":{start:{line:92,column:1},end:{line:113,column:4}},"22":{start:{line:93,column:2},end:{line:112,column:4}},"23":{start:{line:97,column:28},end:{line:105,column:6}},"24":{start:{line:98,column:5},end:{line:105,column:6}},"25":{start:{line:106,column:4},end:{line:110,column:6}},"26":{start:{line:115,column:1},end:{line:128,column:4}},"27":{start:{line:116,column:2},end:{line:127,column:5}},"28":{start:{line:117,column:17},end:{line:124,column:4}},"29":{start:{line:126,column:3},end:{line:126,column:43}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:20},end:{line:5,column:21}},loc:{start:{line:5,column:26},end:{line:129,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:6,column:84},end:{line:6,column:85}},loc:{start:{line:6,column:90},end:{line:27,column:2}},line:6},"2":{name:"(anonymous_2)",decl:{start:{line:10,column:3},end:{line:10,column:4}},loc:{start:{line:10,column:9},end:{line:25,column:4}},line:10},"3":{name:"(anonymous_3)",decl:{start:{line:11,column:28},end:{line:11,column:29}},loc:{start:{line:12,column:5},end:{line:19,column:6}},line:12},"4":{name:"(anonymous_4)",decl:{start:{line:29,column:118},end:{line:29,column:119}},loc:{start:{line:29,column:124},end:{line:45,column:2}},line:29},"5":{name:"(anonymous_5)",decl:{start:{line:32,column:3},end:{line:32,column:4}},loc:{start:{line:32,column:9},end:{line:43,column:4}},line:32},"6":{name:"(anonymous_6)",decl:{start:{line:33,column:28},end:{line:33,column:29}},loc:{start:{line:34,column:5},end:{line:41,column:6}},line:34},"7":{name:"(anonymous_7)",decl:{start:{line:47,column:122},end:{line:47,column:123}},loc:{start:{line:47,column:128},end:{line:68,column:2}},line:47},"8":{name:"(anonymous_8)",decl:{start:{line:51,column:3},end:{line:51,column:4}},loc:{start:{line:51,column:9},end:{line:66,column:4}},line:51},"9":{name:"(anonymous_9)",decl:{start:{line:52,column:28},end:{line:52,column:29}},loc:{start:{line:53,column:5},end:{line:60,column:6}},line:53},"10":{name:"(anonymous_10)",decl:{start:{line:70,column:121},end:{line:70,column:122}},loc:{start:{line:70,column:127},end:{line:90,column:2}},line:70},"11":{name:"(anonymous_11)",decl:{start:{line:73,column:3},end:{line:73,column:4}},loc:{start:{line:73,column:9},end:{line:88,column:4}},line:73},"12":{name:"(anonymous_12)",decl:{start:{line:74,column:28},end:{line:74,column:29}},loc:{start:{line:75,column:5},end:{line:82,column:6}},line:75},"13":{name:"(anonymous_13)",decl:{start:{line:92,column:113},end:{line:92,column:114}},loc:{start:{line:92,column:119},end:{line:113,column:2}},line:92},"14":{name:"(anonymous_14)",decl:{start:{line:96,column:3},end:{line:96,column:4}},loc:{start:{line:96,column:9},end:{line:111,column:4}},line:96},"15":{name:"(anonymous_15)",decl:{start:{line:97,column:28},end:{line:97,column:29}},loc:{start:{line:98,column:5},end:{line:105,column:6}},line:98},"16":{name:"(anonymous_16)",decl:{start:{line:115,column:121},end:{line:115,column:122}},loc:{start:{line:115,column:127},end:{line:128,column:2}},line:115},"17":{name:"(anonymous_17)",decl:{start:{line:116,column:49},end:{line:116,column:50}},loc:{start:{line:116,column:55},end:{line:127,column:3}},line:116}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ad346025fd36075bf15f215c29bb30cbeed56ef1"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1vjwxqx14d=function(){return actualCoverage;};}return actualCoverage;}cov_1vjwxqx14d();import{assert}from"chai";import DIClazz from"../DIClazz.js";import DIClazzFixture from"./fixtures/DIClazzFixture.js";cov_1vjwxqx14d().s[0]++;describe("DIClazz",()=>{cov_1vjwxqx14d().f[0]++;cov_1vjwxqx14d().s[1]++;describe("new DIClazz(null, 'noname', class A, true, new Lifecycle, constructor)",()=>{cov_1vjwxqx14d().f[1]++;cov_1vjwxqx14d().s[2]++;it("should throw an error with message "+"'DIClazz constructor argument 'key' is invalid. Argument 'key' must not be an undefined, null or boolean.'",()=>{cov_1vjwxqx14d().f[2]++;cov_1vjwxqx14d().s[3]++;const funcThrowsError=()=>{cov_1vjwxqx14d().f[3]++;cov_1vjwxqx14d().s[4]++;return new DIClazz(null,DIClazzFixture.name,DIClazzFixture.type,DIClazzFixture.isClass,DIClazzFixture.lifecycle,DIClazzFixture.constructor);};cov_1vjwxqx14d().s[5]++;assert.throws(funcThrowsError,Error,"DIClazz constructor argument 'key' is invalid. Argument 'key' must not be an undefined, null or boolean.");});});cov_1vjwxqx14d().s[6]++;describe("new DIClazz((new DIObjectKeyFactory()).createKey(...), {...}, class A, true, new Lifecycle, constructor)",()=>{cov_1vjwxqx14d().f[4]++;cov_1vjwxqx14d().s[7]++;it("should throw an error with message "+"'DIClazz constructor argument 'name' is invalid. Argument 'name' type must be a string.'",()=>{cov_1vjwxqx14d().f[5]++;cov_1vjwxqx14d().s[8]++;const funcThrowsError=()=>{cov_1vjwxqx14d().f[6]++;cov_1vjwxqx14d().s[9]++;return new DIClazz(DIClazzFixture.key,{name:"name"},DIClazzFixture.type,DIClazzFixture.isClass,DIClazzFixture.lifecycle,DIClazzFixture.constructor);};cov_1vjwxqx14d().s[10]++;assert.throws(funcThrowsError,Error,"DIClazz constructor argument 'name' is invalid. Argument 'name' type must be a string.");});});cov_1vjwxqx14d().s[11]++;describe("new DIClazz((new DIObjectKeyFactory()).createKey(...), 'noname', 'string', true, new Lifecycle, constructor)",()=>{cov_1vjwxqx14d().f[7]++;cov_1vjwxqx14d().s[12]++;it("should throw an error with message "+"'DIClazz constructor argument 'type' is invalid. Argument 'type' must be a class or a function.'",()=>{cov_1vjwxqx14d().f[8]++;cov_1vjwxqx14d().s[13]++;const funcThrowsError=()=>{cov_1vjwxqx14d().f[9]++;cov_1vjwxqx14d().s[14]++;return new DIClazz(DIClazzFixture.key,DIClazzFixture.name,"string",DIClazzFixture.isClass,DIClazzFixture.lifecycle,DIClazzFixture.constructor);};cov_1vjwxqx14d().s[15]++;assert.throws(funcThrowsError,Error,"DIClazz constructor argument 'type' is invalid. Argument 'type' must be a class or a function.");});});cov_1vjwxqx14d().s[16]++;describe("new DIClazz((new DIObjectKeyFactory()).createKey(...), 'noname', class A, null, new Lifecycle, constructor)",()=>{cov_1vjwxqx14d().f[10]++;cov_1vjwxqx14d().s[17]++;it("should throw an error with message "+"'DIClazz constructor argument 'isClass' is invalid. Argument 'isClass' must be a boolean.'",()=>{cov_1vjwxqx14d().f[11]++;cov_1vjwxqx14d().s[18]++;const funcThrowsError=()=>{cov_1vjwxqx14d().f[12]++;cov_1vjwxqx14d().s[19]++;return new DIClazz(DIClazzFixture.key,DIClazzFixture.name,DIClazzFixture.type,null,DIClazzFixture.lifecycle,DIClazzFixture.constructor);};cov_1vjwxqx14d().s[20]++;assert.throws(funcThrowsError,Error,"DIClazz constructor argument 'isClass' is invalid. Argument 'isClass' must be a boolean.");});});cov_1vjwxqx14d().s[21]++;describe("new DIClazz((new DIObjectKeyFactory()).createKey(...), 'noname', class A, true, {...}, constructor)",()=>{cov_1vjwxqx14d().f[13]++;cov_1vjwxqx14d().s[22]++;it("should throw an error with message "+"'DIClazz constructor argument 'lifecycle' is invalid. Argument 'lifecycle' must be an instance of Lifecycle.'",()=>{cov_1vjwxqx14d().f[14]++;cov_1vjwxqx14d().s[23]++;const funcThrowsError=()=>{cov_1vjwxqx14d().f[15]++;cov_1vjwxqx14d().s[24]++;return new DIClazz(DIClazzFixture.key,DIClazzFixture.name,DIClazzFixture.type,DIClazzFixture.isClass,{a:1},DIClazzFixture.constructor);};cov_1vjwxqx14d().s[25]++;assert.throws(funcThrowsError,Error,"DIClazz constructor argument 'lifecycle' is invalid. Argument 'lifecycle' must be an instance of Lifecycle.");});});cov_1vjwxqx14d().s[26]++;describe("new DIClazz((new DIObjectKeyFactory()).createKey(...), 'noname', class A, true, new Lifecycle, constructor)",()=>{cov_1vjwxqx14d().f[16]++;cov_1vjwxqx14d().s[27]++;it("should set it's own properties correctly",()=>{cov_1vjwxqx14d().f[17]++;const clazz=(cov_1vjwxqx14d().s[28]++,new DIClazz(DIClazzFixture.key,DIClazzFixture.name,DIClazzFixture.type,DIClazzFixture.isClass,DIClazzFixture.lifecycle,DIClazzFixture.constructor));// check that all properties have been set correctly
cov_1vjwxqx14d().s[29]++;assert.deepEqual(clazz,DIClazzFixture);});});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,