function cov_kr4achrok(){var path="D:\\Programming\\xyz\\dizy\\src\\test\\SingletoneContainer.test.js";var hash="19b62b4dc9671900ce10c149b9766c947e6eeb25";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Programming\\xyz\\dizy\\src\\test\\SingletoneContainer.test.js",statementMap:{"0":{start:{line:10,column:0},end:{line:129,column:3}},"1":{start:{line:11,column:1},end:{line:26,column:4}},"2":{start:{line:12,column:2},end:{line:25,column:4}},"3":{start:{line:17,column:28},end:{line:17,column:59}},"4":{start:{line:17,column:34},end:{line:17,column:59}},"5":{start:{line:18,column:4},end:{line:23,column:6}},"6":{start:{line:28,column:1},end:{line:39,column:4}},"7":{start:{line:29,column:2},end:{line:38,column:5}},"8":{start:{line:30,column:27},end:{line:30,column:87}},"9":{start:{line:30,column:33},end:{line:30,column:87}},"10":{start:{line:31,column:3},end:{line:36,column:5}},"11":{start:{line:37,column:3},end:{line:37,column:57}},"12":{start:{line:41,column:1},end:{line:52,column:4}},"13":{start:{line:42,column:2},end:{line:51,column:5}},"14":{start:{line:43,column:27},end:{line:44,column:112}},"15":{start:{line:44,column:4},end:{line:44,column:112}},"16":{start:{line:45,column:3},end:{line:50,column:5}},"17":{start:{line:54,column:1},end:{line:69,column:4}},"18":{start:{line:55,column:2},end:{line:68,column:4}},"19":{start:{line:60,column:28},end:{line:60,column:116}},"20":{start:{line:60,column:34},end:{line:60,column:116}},"21":{start:{line:61,column:4},end:{line:66,column:6}},"22":{start:{line:71,column:1},end:{line:100,column:4}},"23":{start:{line:72,column:21},end:{line:75,column:3}},"24":{start:{line:76,column:18},end:{line:76,column:89}},"25":{start:{line:77,column:2},end:{line:77,column:17}},"26":{start:{line:78,column:26},end:{line:78,column:70}},"27":{start:{line:79,column:19},end:{line:79,column:82}},"28":{start:{line:81,column:2},end:{line:85,column:5}},"29":{start:{line:82,column:3},end:{line:84,column:6}},"30":{start:{line:83,column:4},end:{line:83,column:120}},"31":{start:{line:87,column:2},end:{line:92,column:5}},"32":{start:{line:88,column:3},end:{line:91,column:6}},"33":{start:{line:89,column:27},end:{line:89,column:90}},"34":{start:{line:90,column:4},end:{line:90,column:43}},"35":{start:{line:94,column:2},end:{line:99,column:5}},"36":{start:{line:95,column:3},end:{line:98,column:6}},"37":{start:{line:96,column:23},end:{line:96,column:59}},"38":{start:{line:97,column:4},end:{line:97,column:40}},"39":{start:{line:102,column:1},end:{line:120,column:4}},"40":{start:{line:103,column:18},end:{line:103,column:47}},"41":{start:{line:104,column:2},end:{line:104,column:17}},"42":{start:{line:105,column:26},end:{line:108,column:3}},"43":{start:{line:107,column:45},end:{line:107,column:103}},"44":{start:{line:110,column:2},end:{line:113,column:5}},"45":{start:{line:111,column:27},end:{line:111,column:121}},"46":{start:{line:111,column:33},end:{line:111,column:121}},"47":{start:{line:112,column:3},end:{line:112,column:119}},"48":{start:{line:115,column:2},end:{line:119,column:5}},"49":{start:{line:116,column:27},end:{line:117,column:118}},"50":{start:{line:117,column:4},end:{line:117,column:118}},"51":{start:{line:118,column:3},end:{line:118,column:47}},"52":{start:{line:122,column:1},end:{line:128,column:4}},"53":{start:{line:123,column:2},end:{line:127,column:5}},"54":{start:{line:124,column:19},end:{line:124,column:48}},"55":{start:{line:125,column:31},end:{line:125,column:63}},"56":{start:{line:126,column:3},end:{line:126,column:62}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:32},end:{line:10,column:33}},loc:{start:{line:10,column:38},end:{line:129,column:1}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:11,column:39},end:{line:11,column:40}},loc:{start:{line:11,column:45},end:{line:26,column:2}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:16,column:3},end:{line:16,column:4}},loc:{start:{line:16,column:9},end:{line:24,column:4}},line:16},"3":{name:"(anonymous_3)",decl:{start:{line:17,column:28},end:{line:17,column:29}},loc:{start:{line:17,column:34},end:{line:17,column:59}},line:17},"4":{name:"(anonymous_4)",decl:{start:{line:28,column:46},end:{line:28,column:47}},loc:{start:{line:28,column:52},end:{line:39,column:2}},line:28},"5":{name:"(anonymous_5)",decl:{start:{line:29,column:81},end:{line:29,column:82}},loc:{start:{line:29,column:87},end:{line:38,column:3}},line:29},"6":{name:"(anonymous_6)",decl:{start:{line:30,column:27},end:{line:30,column:28}},loc:{start:{line:30,column:33},end:{line:30,column:87}},line:30},"7":{name:"(anonymous_7)",decl:{start:{line:41,column:78},end:{line:41,column:79}},loc:{start:{line:41,column:84},end:{line:52,column:2}},line:41},"8":{name:"(anonymous_8)",decl:{start:{line:42,column:43},end:{line:42,column:44}},loc:{start:{line:42,column:49},end:{line:51,column:3}},line:42},"9":{name:"(anonymous_9)",decl:{start:{line:43,column:27},end:{line:43,column:28}},loc:{start:{line:44,column:4},end:{line:44,column:112}},line:44},"10":{name:"(anonymous_10)",decl:{start:{line:54,column:74},end:{line:54,column:75}},loc:{start:{line:54,column:80},end:{line:69,column:2}},line:54},"11":{name:"(anonymous_11)",decl:{start:{line:59,column:3},end:{line:59,column:4}},loc:{start:{line:59,column:9},end:{line:67,column:4}},line:59},"12":{name:"(anonymous_12)",decl:{start:{line:60,column:28},end:{line:60,column:29}},loc:{start:{line:60,column:34},end:{line:60,column:116}},line:60},"13":{name:"(anonymous_13)",decl:{start:{line:71,column:47},end:{line:71,column:48}},loc:{start:{line:71,column:53},end:{line:100,column:2}},line:71},"14":{name:"(anonymous_14)",decl:{start:{line:81,column:84},end:{line:81,column:85}},loc:{start:{line:81,column:90},end:{line:85,column:3}},line:81},"15":{name:"(anonymous_15)",decl:{start:{line:82,column:46},end:{line:82,column:47}},loc:{start:{line:82,column:52},end:{line:84,column:4}},line:82},"16":{name:"(anonymous_16)",decl:{start:{line:87,column:99},end:{line:87,column:100}},loc:{start:{line:87,column:105},end:{line:92,column:3}},line:87},"17":{name:"(anonymous_17)",decl:{start:{line:88,column:55},end:{line:88,column:56}},loc:{start:{line:88,column:61},end:{line:91,column:4}},line:88},"18":{name:"(anonymous_18)",decl:{start:{line:94,column:88},end:{line:94,column:89}},loc:{start:{line:94,column:94},end:{line:99,column:3}},line:94},"19":{name:"(anonymous_19)",decl:{start:{line:95,column:33},end:{line:95,column:34}},loc:{start:{line:95,column:39},end:{line:98,column:4}},line:95},"20":{name:"(anonymous_20)",decl:{start:{line:102,column:69},end:{line:102,column:70}},loc:{start:{line:102,column:75},end:{line:120,column:2}},line:102},"21":{name:"(anonymous_21)",decl:{start:{line:107,column:32},end:{line:107,column:33}},loc:{start:{line:107,column:45},end:{line:107,column:103}},line:107},"22":{name:"(anonymous_22)",decl:{start:{line:110,column:107},end:{line:110,column:108}},loc:{start:{line:110,column:113},end:{line:113,column:3}},line:110},"23":{name:"(anonymous_23)",decl:{start:{line:111,column:27},end:{line:111,column:28}},loc:{start:{line:111,column:33},end:{line:111,column:121}},line:111},"24":{name:"(anonymous_24)",decl:{start:{line:115,column:50},end:{line:115,column:51}},loc:{start:{line:115,column:56},end:{line:119,column:3}},line:115},"25":{name:"(anonymous_25)",decl:{start:{line:116,column:27},end:{line:116,column:28}},loc:{start:{line:117,column:4},end:{line:117,column:118}},line:117},"26":{name:"(anonymous_26)",decl:{start:{line:122,column:45},end:{line:122,column:46}},loc:{start:{line:122,column:51},end:{line:128,column:2}},line:122},"27":{name:"(anonymous_27)",decl:{start:{line:123,column:30},end:{line:123,column:31}},loc:{start:{line:123,column:36},end:{line:127,column:3}},line:123}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"19b62b4dc9671900ce10c149b9766c947e6eeb25"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_kr4achrok=function(){return actualCoverage;};}return actualCoverage;}cov_kr4achrok();import{assert}from"chai";import DependencyTreeFixture from"./fixtures/DependencyTreeFixture.js";import DependencyTree from"../containers/helpers/DependencyTree.js";import DependencyTreeNode from"../containers/helpers/DependencyTreeNode.js";import SingletoneContainer from"../containers/SingletoneContainer.js";// import ContextContainer from "../containers/ContextContainer.js";
import ContextContainerFactory from"../containers/ContextContainerFactory.js";import LifecycleEnum from"../constants/LifecycleEnum.js";cov_kr4achrok().s[0]++;describe("SingletoneContainer",()=>{cov_kr4achrok().f[0]++;cov_kr4achrok().s[1]++;describe("new SingletoneContainer()",()=>{cov_kr4achrok().f[1]++;cov_kr4achrok().s[2]++;it("should throw an error "+"'Invalid simple container parent. "+"Parent must be an instance of AbstractContextContainer or it's derived class, null or undefined.'",()=>{cov_kr4achrok().f[2]++;cov_kr4achrok().s[3]++;const funcThrowsError=()=>{cov_kr4achrok().f[3]++;cov_kr4achrok().s[4]++;return new SingletoneContainer();};cov_kr4achrok().s[5]++;assert.throws(funcThrowsError,Error,"Invalid simple container parent. "+"Parent must be an instance of AbstractContextContainer or it's derived class, null or undefined.");});});cov_kr4achrok().s[6]++;describe("new SingletoneContainer(context)",()=>{cov_kr4achrok().f[4]++;cov_kr4achrok().s[7]++;it("should not throw an error; classTreeList defined with default value = []",()=>{cov_kr4achrok().f[5]++;cov_kr4achrok().s[8]++;const funcThrowsError=()=>{cov_kr4achrok().f[6]++;cov_kr4achrok().s[9]++;return new SingletoneContainer(DependencyTreeFixture.context);};cov_kr4achrok().s[10]++;assert.doesNotThrow(funcThrowsError,Error,"DIContainer constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances");cov_kr4achrok().s[11]++;assert.deepEqual(funcThrowsError().classTreeList,[]);});});cov_kr4achrok().s[12]++;describe("new SingletoneContainer(context, [new DependencyTree(baseNode)])",()=>{cov_kr4achrok().f[7]++;cov_kr4achrok().s[13]++;it("should set classTreeList correctly",()=>{cov_kr4achrok().f[8]++;cov_kr4achrok().s[14]++;const funcThrowsError=()=>{cov_kr4achrok().f[9]++;cov_kr4achrok().s[15]++;return new SingletoneContainer(DependencyTreeFixture.context,[new DependencyTree(DependencyTreeFixture.baseNode)]);};cov_kr4achrok().s[16]++;assert.doesNotThrow(funcThrowsError,Error,"DIContainer constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances");});});cov_kr4achrok().s[17]++;describe("new SingletoneContainer(context, [{ test: 1 }, { test: 2 }])",()=>{cov_kr4achrok().f[10]++;cov_kr4achrok().s[18]++;it("should throw an error "+"'DIContainer constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances'",()=>{cov_kr4achrok().f[11]++;cov_kr4achrok().s[19]++;const funcThrowsError=()=>{cov_kr4achrok().f[12]++;cov_kr4achrok().s[20]++;return new SingletoneContainer(DependencyTreeFixture.context,[{test:1},{test:2}]);};cov_kr4achrok().s[21]++;assert.throws(funcThrowsError,Error,"DIContainer constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances");});});cov_kr4achrok().s[22]++;describe("SingletoneContainer.getInstance()",()=>{cov_kr4achrok().f[13]++;const clazzTrees=(cov_kr4achrok().s[23]++,[new DependencyTree(DependencyTreeFixture.baseNode),new DependencyTree(new DependencyTreeNode(DependencyTreeFixture.derivedClazz,0,[]))]);const context=(cov_kr4achrok().s[24]++,ContextContainerFactory.createContainer(DependencyTreeFixture.diConfig));cov_kr4achrok().s[25]++;context.init();const simpleContainer=(cov_kr4achrok().s[26]++,new SingletoneContainer(context,clazzTrees));const instance=(cov_kr4achrok().s[27]++,simpleContainer.getInstance(DependencyTreeFixture.baseNode.key));cov_kr4achrok().s[28]++;describe("SingletoneContainer.getInstance(key of di object from this container)",()=>{cov_kr4achrok().f[14]++;cov_kr4achrok().s[29]++;it(`should return an instance of class A`,()=>{cov_kr4achrok().f[15]++;cov_kr4achrok().s[30]++;assert.deepEqual(instance,new DependencyTreeFixture.baseClazz.type(new DependencyTreeFixture.derivedClazz.type()));});});cov_kr4achrok().s[31]++;describe("call SingletoneContainer.getInstance(key of di object from this container) two times",()=>{cov_kr4achrok().f[16]++;cov_kr4achrok().s[32]++;it(`should return the same instance for each call`,()=>{cov_kr4achrok().f[17]++;const secondInstance=(cov_kr4achrok().s[33]++,simpleContainer.getInstance(DependencyTreeFixture.baseNode.key));cov_kr4achrok().s[34]++;assert.equal(instance,secondInstance);});});cov_kr4achrok().s[35]++;describe("SingletoneContainer.getInstance(key that doesn't exist in this container)",()=>{cov_kr4achrok().f[18]++;cov_kr4achrok().s[36]++;it(`should return undefined`,()=>{cov_kr4achrok().f[19]++;const noInstance=(cov_kr4achrok().s[37]++,simpleContainer.getInstance("noKey"));cov_kr4achrok().s[38]++;assert.equal(noInstance,undefined);});});});cov_kr4achrok().s[39]++;describe("SingletoneContainer._addInstance('stringKey', instance)",()=>{cov_kr4achrok().f[20]++;const context=(cov_kr4achrok().s[40]++,DependencyTreeFixture.context);cov_kr4achrok().s[41]++;context.init();const simpleContainer=(cov_kr4achrok().s[42]++,new SingletoneContainer(context,context.classTreeList.filter(clsTree=>{cov_kr4achrok().f[21]++;cov_kr4achrok().s[43]++;return clsTree.baseNode.lifecycle.id===LifecycleEnum.Singletone;})));cov_kr4achrok().s[44]++;it("should throw an error 'Invalid key type. Argument 'key' must be an instance of DIObjectKey class.'",()=>{cov_kr4achrok().f[22]++;cov_kr4achrok().s[45]++;const funcThrowsError=()=>{cov_kr4achrok().f[23]++;cov_kr4achrok().s[46]++;return simpleContainer._addInstance("stringKey",new DependencyTreeFixture.derivedClazz.type());};cov_kr4achrok().s[47]++;assert.throws(funcThrowsError,Error,`Invalid key type. Argument 'key' must be an instance of DIObjectKey class.`);});cov_kr4achrok().s[48]++;it("should add an instance (error not thrown)",()=>{cov_kr4achrok().f[24]++;cov_kr4achrok().s[49]++;const funcThrowsError=()=>{cov_kr4achrok().f[25]++;cov_kr4achrok().s[50]++;return simpleContainer._addInstance(DependencyTreeFixture.derivedNode.key,new DependencyTreeFixture.derivedClazz.type());};cov_kr4achrok().s[51]++;assert.doesNotThrow(funcThrowsError,Error);});});cov_kr4achrok().s[52]++;describe("SingletoneContainer.getParent()",()=>{cov_kr4achrok().f[26]++;cov_kr4achrok().s[53]++;it("should return context",()=>{cov_kr4achrok().f[27]++;const context=(cov_kr4achrok().s[54]++,DependencyTreeFixture.context);const singletoneContainer=(cov_kr4achrok().s[55]++,new SingletoneContainer(context));cov_kr4achrok().s[56]++;assert.deepEqual(singletoneContainer.getParent(),context);});});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,