function cov_7trcagcsr(){var path="D:\\Programming\\xyz\\dizy\\src\\test\\DemandedFactory.test.js";var hash="b61ae0995a4eebd9c024535dc46c113ca68187bf";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Programming\\xyz\\dizy\\src\\test\\DemandedFactory.test.js",statementMap:{"0":{start:{line:9,column:0},end:{line:119,column:3}},"1":{start:{line:10,column:1},end:{line:25,column:4}},"2":{start:{line:11,column:2},end:{line:24,column:4}},"3":{start:{line:16,column:28},end:{line:16,column:55}},"4":{start:{line:16,column:34},end:{line:16,column:55}},"5":{start:{line:17,column:4},end:{line:22,column:6}},"6":{start:{line:27,column:1},end:{line:38,column:4}},"7":{start:{line:28,column:2},end:{line:37,column:5}},"8":{start:{line:29,column:27},end:{line:29,column:83}},"9":{start:{line:29,column:33},end:{line:29,column:83}},"10":{start:{line:30,column:3},end:{line:35,column:5}},"11":{start:{line:36,column:3},end:{line:36,column:57}},"12":{start:{line:40,column:1},end:{line:46,column:4}},"13":{start:{line:41,column:2},end:{line:45,column:5}},"14":{start:{line:42,column:27},end:{line:43,column:108}},"15":{start:{line:43,column:4},end:{line:43,column:108}},"16":{start:{line:44,column:3},end:{line:44,column:40}},"17":{start:{line:48,column:1},end:{line:63,column:4}},"18":{start:{line:49,column:2},end:{line:62,column:4}},"19":{start:{line:54,column:28},end:{line:54,column:112}},"20":{start:{line:54,column:34},end:{line:54,column:112}},"21":{start:{line:55,column:4},end:{line:60,column:6}},"22":{start:{line:65,column:1},end:{line:93,column:4}},"23":{start:{line:66,column:21},end:{line:66,column:125}},"24":{start:{line:67,column:18},end:{line:67,column:89}},"25":{start:{line:68,column:2},end:{line:68,column:17}},"26":{start:{line:69,column:28},end:{line:69,column:68}},"27":{start:{line:70,column:19},end:{line:70,column:75}},"28":{start:{line:72,column:2},end:{line:77,column:5}},"29":{start:{line:73,column:3},end:{line:76,column:6}},"30":{start:{line:79,column:2},end:{line:85,column:5}},"31":{start:{line:80,column:3},end:{line:84,column:6}},"32":{start:{line:81,column:27},end:{line:81,column:83}},"33":{start:{line:82,column:4},end:{line:82,column:46}},"34":{start:{line:83,column:4},end:{line:83,column:47}},"35":{start:{line:87,column:2},end:{line:92,column:5}},"36":{start:{line:88,column:3},end:{line:91,column:6}},"37":{start:{line:89,column:23},end:{line:89,column:64}},"38":{start:{line:90,column:4},end:{line:90,column:40}},"39":{start:{line:112,column:1},end:{line:118,column:4}},"40":{start:{line:113,column:2},end:{line:117,column:5}},"41":{start:{line:114,column:19},end:{line:114,column:48}},"42":{start:{line:115,column:29},end:{line:115,column:57}},"43":{start:{line:116,column:3},end:{line:116,column:60}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:28},end:{line:9,column:29}},loc:{start:{line:9,column:34},end:{line:119,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:35},end:{line:10,column:36}},loc:{start:{line:10,column:41},end:{line:25,column:2}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:15,column:3},end:{line:15,column:4}},loc:{start:{line:15,column:9},end:{line:23,column:4}},line:15},"3":{name:"(anonymous_3)",decl:{start:{line:16,column:28},end:{line:16,column:29}},loc:{start:{line:16,column:34},end:{line:16,column:55}},line:16},"4":{name:"(anonymous_4)",decl:{start:{line:27,column:42},end:{line:27,column:43}},loc:{start:{line:27,column:48},end:{line:38,column:2}},line:27},"5":{name:"(anonymous_5)",decl:{start:{line:28,column:81},end:{line:28,column:82}},loc:{start:{line:28,column:87},end:{line:37,column:3}},line:28},"6":{name:"(anonymous_6)",decl:{start:{line:29,column:27},end:{line:29,column:28}},loc:{start:{line:29,column:33},end:{line:29,column:83}},line:29},"7":{name:"(anonymous_7)",decl:{start:{line:40,column:75},end:{line:40,column:76}},loc:{start:{line:40,column:81},end:{line:46,column:2}},line:40},"8":{name:"(anonymous_8)",decl:{start:{line:41,column:43},end:{line:41,column:44}},loc:{start:{line:41,column:49},end:{line:45,column:3}},line:41},"9":{name:"(anonymous_9)",decl:{start:{line:42,column:27},end:{line:42,column:28}},loc:{start:{line:43,column:4},end:{line:43,column:108}},line:43},"10":{name:"(anonymous_10)",decl:{start:{line:48,column:70},end:{line:48,column:71}},loc:{start:{line:48,column:76},end:{line:63,column:2}},line:48},"11":{name:"(anonymous_11)",decl:{start:{line:53,column:3},end:{line:53,column:4}},loc:{start:{line:53,column:9},end:{line:61,column:4}},line:53},"12":{name:"(anonymous_12)",decl:{start:{line:54,column:28},end:{line:54,column:29}},loc:{start:{line:54,column:34},end:{line:54,column:112}},line:54},"13":{name:"(anonymous_13)",decl:{start:{line:65,column:46},end:{line:65,column:47}},loc:{start:{line:65,column:52},end:{line:93,column:2}},line:65},"14":{name:"(anonymous_14)",decl:{start:{line:72,column:83},end:{line:72,column:84}},loc:{start:{line:72,column:89},end:{line:77,column:3}},line:72},"15":{name:"(anonymous_15)",decl:{start:{line:73,column:46},end:{line:73,column:47}},loc:{start:{line:73,column:52},end:{line:76,column:4}},line:73},"16":{name:"(anonymous_16)",decl:{start:{line:79,column:98},end:{line:79,column:99}},loc:{start:{line:79,column:104},end:{line:85,column:3}},line:79},"17":{name:"(anonymous_17)",decl:{start:{line:80,column:54},end:{line:80,column:55}},loc:{start:{line:80,column:60},end:{line:84,column:4}},line:80},"18":{name:"(anonymous_18)",decl:{start:{line:87,column:87},end:{line:87,column:88}},loc:{start:{line:87,column:93},end:{line:92,column:3}},line:87},"19":{name:"(anonymous_19)",decl:{start:{line:88,column:33},end:{line:88,column:34}},loc:{start:{line:88,column:39},end:{line:91,column:4}},line:88},"20":{name:"(anonymous_20)",decl:{start:{line:112,column:41},end:{line:112,column:42}},loc:{start:{line:112,column:47},end:{line:118,column:2}},line:112},"21":{name:"(anonymous_21)",decl:{start:{line:113,column:30},end:{line:113,column:31}},loc:{start:{line:113,column:36},end:{line:117,column:3}},line:113}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b61ae0995a4eebd9c024535dc46c113ca68187bf"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_7trcagcsr=function(){return actualCoverage;};}return actualCoverage;}cov_7trcagcsr();import{assert}from"chai";import DependencyTreeFixture from"./fixtures/DependencyTreeFixture.js";import DependencyTree from"../containers/helpers/DependencyTree.js";import DependencyTreeNode from"../containers/helpers/DependencyTreeNode.js";// eslint-disable-line no-unused-vars
import DemandedFactory from"../containers/DemandedFactory.js";import ContextContainer from"../containers/ContextContainer.js";import ContextContainerFactory from"../containers/ContextContainerFactory.js";cov_7trcagcsr().s[0]++;describe("DemandedFactory",()=>{cov_7trcagcsr().f[0]++;cov_7trcagcsr().s[1]++;describe("new DemandedFactory()",()=>{cov_7trcagcsr().f[1]++;cov_7trcagcsr().s[2]++;it("should throw an error "+"'Invalid demanded factory parent. "+"Parent must be an instance of AbstractContextContainer or it's derived class, null or undefined.'",()=>{cov_7trcagcsr().f[2]++;cov_7trcagcsr().s[3]++;const funcThrowsError=()=>{cov_7trcagcsr().f[3]++;cov_7trcagcsr().s[4]++;return new DemandedFactory();};cov_7trcagcsr().s[5]++;assert.throws(funcThrowsError,Error,"Invalid demanded factory parent. "+"Parent must be an instance of AbstractContextContainer or it's derived class, null or undefined.");});});cov_7trcagcsr().s[6]++;describe("new DemandedFactory(context)",()=>{cov_7trcagcsr().f[4]++;cov_7trcagcsr().s[7]++;it("should not throw an error; classTreeList defined with default value = []",()=>{cov_7trcagcsr().f[5]++;cov_7trcagcsr().s[8]++;const funcThrowsError=()=>{cov_7trcagcsr().f[6]++;cov_7trcagcsr().s[9]++;return new DemandedFactory(DependencyTreeFixture.context);};cov_7trcagcsr().s[10]++;assert.doesNotThrow(funcThrowsError,Error,"DemandedFactory constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances");cov_7trcagcsr().s[11]++;assert.deepEqual(funcThrowsError().classTreeList,[]);});});cov_7trcagcsr().s[12]++;describe("new DemandedFactory(context, [new DependencyTree(demAClazz)])",()=>{cov_7trcagcsr().f[7]++;cov_7trcagcsr().s[13]++;it("should set classTreeList correctly",()=>{cov_7trcagcsr().f[8]++;cov_7trcagcsr().s[14]++;const funcThrowsError=()=>{cov_7trcagcsr().f[9]++;cov_7trcagcsr().s[15]++;return new DemandedFactory(DependencyTreeFixture.context,[new DependencyTree(DependencyTreeFixture.demANode)]);};cov_7trcagcsr().s[16]++;assert.doesNotThrow(funcThrowsError);});});cov_7trcagcsr().s[17]++;describe("new DemandedFactory(context, [{ test: 1 }, { test: 2 }])",()=>{cov_7trcagcsr().f[10]++;cov_7trcagcsr().s[18]++;it("should throw an error "+"'DemandedFactory constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances'",()=>{cov_7trcagcsr().f[11]++;cov_7trcagcsr().s[19]++;const funcThrowsError=()=>{cov_7trcagcsr().f[12]++;cov_7trcagcsr().s[20]++;return new DemandedFactory(DependencyTreeFixture.context,[{test:1},{test:2}]);};cov_7trcagcsr().s[21]++;assert.throws(funcThrowsError,Error,"DemandedFactory constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances");});});cov_7trcagcsr().s[22]++;describe("DemandedFactory.createInstance()",()=>{cov_7trcagcsr().f[13]++;const clazzTrees=(cov_7trcagcsr().s[23]++,[new DependencyTree(DependencyTreeFixture.demBNode),new DependencyTree(DependencyTreeFixture.demANode)]);const context=(cov_7trcagcsr().s[24]++,ContextContainerFactory.createContainer(DependencyTreeFixture.diConfig));cov_7trcagcsr().s[25]++;context.init();const demandedContainer=(cov_7trcagcsr().s[26]++,new DemandedFactory(context,clazzTrees));const instance=(cov_7trcagcsr().s[27]++,context.getInstance(DependencyTreeFixture.demANode.name));cov_7trcagcsr().s[28]++;describe("DemandedFactory.createInstance(key of di object from this container)",()=>{cov_7trcagcsr().f[14]++;cov_7trcagcsr().s[29]++;it(`should return an instance of class A`,()=>{cov_7trcagcsr().f[15]++;}// const b = new DependencyTreeFixture.demBClazz.type();
// assert.deepEqual(instance, new DependencyTreeFixture.demAClazz.type(b));
);});cov_7trcagcsr().s[30]++;describe("call DemandedFactory.createInstance(key of di object from this container) two times",()=>{cov_7trcagcsr().f[16]++;cov_7trcagcsr().s[31]++;it(`should return the new instance for each call`,()=>{cov_7trcagcsr().f[17]++;const secondInstance=(cov_7trcagcsr().s[32]++,context.getInstance(DependencyTreeFixture.demANode.name));cov_7trcagcsr().s[33]++;assert.notEqual(instance,secondInstance);cov_7trcagcsr().s[34]++;assert.deepEqual(instance,secondInstance);});});cov_7trcagcsr().s[35]++;describe("DemandedFactory.createInstance(key that doesn't exist in this container)",()=>{cov_7trcagcsr().f[18]++;cov_7trcagcsr().s[36]++;it(`should return undefined`,()=>{cov_7trcagcsr().f[19]++;const noInstance=(cov_7trcagcsr().s[37]++,demandedContainer.createInstance("noKey"));cov_7trcagcsr().s[38]++;assert.equal(noInstance,undefined);});});});// describe("SingletoneContainer.addInstance('stringKey', instance)", function () {
//     const context = new ContextContainer(DependencyTreeFixture.diConfig);
//     context.init();
//     const simpleContainer = new SingletoneContainer(context, []);
//     it("should throw an error 'Invalid key type. Argument 'key' must be an instance of DIObjectKey class.'", function () {
//         const funcThrowsError = () => simpleContainer.addInstance('stringKey', new DependencyTreeFixture.derivedClazz.type());
//         assert.throws(funcThrowsError, Error, `Invalid key type. Argument 'key' must be an instance of DIObjectKey class.`);
//     });
//     it("should add an instance (error not thrown)", function () {
//         const funcThrowsError = () =>
//				simpleContainer.addInstance(DependencyTreeFixture.derivedNode.key, new DependencyTreeFixture.derivedClazz.type());
//         assert.doesNotThrow(funcThrowsError, Error);
//     });
// });
cov_7trcagcsr().s[39]++;describe("DemandedFactory.getParent()",()=>{cov_7trcagcsr().f[20]++;cov_7trcagcsr().s[40]++;it("should return context",()=>{cov_7trcagcsr().f[21]++;const context=(cov_7trcagcsr().s[41]++,DependencyTreeFixture.context);const demandedContainer=(cov_7trcagcsr().s[42]++,new DemandedFactory(context));cov_7trcagcsr().s[43]++;assert.deepEqual(demandedContainer.getParent(),context);});});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,