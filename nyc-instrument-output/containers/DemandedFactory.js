function cov_60my8k259(){var path="D:\\Programming\\xyz\\dizy\\src\\containers\\DemandedFactory.js";var hash="f86fb6dd9731c32c1c1bc484703987375b1919f0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Programming\\xyz\\dizy\\src\\containers\\DemandedFactory.js",statementMap:{"0":{start:{line:14,column:2},end:{line:17,column:4}},"1":{start:{line:23,column:2},end:{line:26,column:4}},"2":{start:{line:40,column:2},end:{line:42,column:3}},"3":{start:{line:41,column:3},end:{line:41,column:44}},"4":{start:{line:43,column:2},end:{line:45,column:3}},"5":{start:{line:43,column:96},end:{line:43,column:132}},"6":{start:{line:44,column:3},end:{line:44,column:51}},"7":{start:{line:46,column:36},end:{line:46,column:117}},"8":{start:{line:46,column:64},end:{line:46,column:116}},"9":{start:{line:47,column:2},end:{line:49,column:3}},"10":{start:{line:48,column:3},end:{line:48,column:90}},"11":{start:{line:50,column:2},end:{line:50,column:37}},"12":{start:{line:51,column:2},end:{line:51,column:24}},"13":{start:{line:57,column:25},end:{line:57,column:27}},"14":{start:{line:58,column:2},end:{line:70,column:3}},"15":{start:{line:59,column:3},end:{line:69,column:6}},"16":{start:{line:60,column:21},end:{line:60,column:100}},"17":{start:{line:60,column:70},end:{line:60,column:99}},"18":{start:{line:62,column:5},end:{line:64,column:17}},"19":{start:{line:65,column:4},end:{line:67,column:5}},"20":{start:{line:66,column:5},end:{line:66,column:49}},"21":{start:{line:68,column:4},end:{line:68,column:68}},"22":{start:{line:71,column:2},end:{line:71,column:46}},"23":{start:{line:72,column:19},end:{line:72,column:84}},"24":{start:{line:73,column:2},end:{line:73,column:60}},"25":{start:{line:74,column:2},end:{line:74,column:18}},"26":{start:{line:82,column:2},end:{line:84,column:3}},"27":{start:{line:83,column:3},end:{line:83,column:82}},"28":{start:{line:85,column:2},end:{line:85,column:45}},"29":{start:{line:96,column:16},end:{line:96,column:82}},"30":{start:{line:96,column:49},end:{line:96,column:81}},"31":{start:{line:97,column:2},end:{line:99,column:3}},"32":{start:{line:98,column:3},end:{line:98,column:20}},"33":{start:{line:100,column:2},end:{line:100,column:36}},"34":{start:{line:108,column:2},end:{line:108,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:1},end:{line:13,column:2}},loc:{start:{line:13,column:15},end:{line:18,column:2}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:1},end:{line:22,column:2}},loc:{start:{line:22,column:15},end:{line:27,column:2}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:39,column:1},end:{line:39,column:2}},loc:{start:{line:39,column:41},end:{line:52,column:2}},line:39},"3":{name:"(anonymous_3)",decl:{start:{line:43,column:83},end:{line:43,column:84}},loc:{start:{line:43,column:96},end:{line:43,column:132}},line:43},"4":{name:"(anonymous_4)",decl:{start:{line:46,column:55},end:{line:46,column:56}},loc:{start:{line:46,column:64},end:{line:46,column:116}},line:46},"5":{name:"(anonymous_5)",decl:{start:{line:59,column:47},end:{line:59,column:48}},loc:{start:{line:59,column:56},end:{line:69,column:4}},line:59},"6":{name:"(anonymous_6)",decl:{start:{line:60,column:57},end:{line:60,column:58}},loc:{start:{line:60,column:70},end:{line:60,column:99}},line:60},"7":{name:"(anonymous_7)",decl:{start:{line:81,column:1},end:{line:81,column:2}},loc:{start:{line:81,column:32},end:{line:86,column:2}},line:81},"8":{name:"(anonymous_8)",decl:{start:{line:93,column:1},end:{line:93,column:2}},loc:{start:{line:93,column:21},end:{line:101,column:2}},line:93},"9":{name:"(anonymous_9)",decl:{start:{line:96,column:40},end:{line:96,column:41}},loc:{start:{line:96,column:49},end:{line:96,column:81}},line:96},"10":{name:"(anonymous_10)",decl:{start:{line:107,column:1},end:{line:107,column:2}},loc:{start:{line:107,column:13},end:{line:109,column:2}},line:107}},branchMap:{"0":{loc:{start:{line:39,column:21},end:{line:39,column:39}},type:"default-arg",locations:[{start:{line:39,column:37},end:{line:39,column:39}}],line:39},"1":{loc:{start:{line:40,column:2},end:{line:42,column:3}},type:"if",locations:[{start:{line:40,column:2},end:{line:42,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:40},"2":{loc:{start:{line:43,column:2},end:{line:45,column:3}},type:"if",locations:[{start:{line:43,column:2},end:{line:45,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:43},"3":{loc:{start:{line:43,column:6},end:{line:43,column:134}},type:"binary-expr",locations:[{start:{line:43,column:6},end:{line:43,column:35}},{start:{line:43,column:40},end:{line:43,column:60}},{start:{line:43,column:64},end:{line:43,column:133}}],line:43},"4":{loc:{start:{line:47,column:2},end:{line:49,column:3}},type:"if",locations:[{start:{line:47,column:2},end:{line:49,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:47},"5":{loc:{start:{line:58,column:2},end:{line:70,column:3}},type:"if",locations:[{start:{line:58,column:2},end:{line:70,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:58},"6":{loc:{start:{line:62,column:5},end:{line:64,column:17}},type:"cond-expr",locations:[{start:{line:63,column:8},end:{line:63,column:98}},{start:{line:64,column:8},end:{line:64,column:17}}],line:62},"7":{loc:{start:{line:65,column:4},end:{line:67,column:5}},type:"if",locations:[{start:{line:65,column:4},end:{line:67,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:65},"8":{loc:{start:{line:82,column:2},end:{line:84,column:3}},type:"if",locations:[{start:{line:82,column:2},end:{line:84,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:82},"9":{loc:{start:{line:97,column:2},end:{line:99,column:3}},type:"if",locations:[{start:{line:97,column:2},end:{line:99,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:97}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f86fb6dd9731c32c1c1bc484703987375b1919f0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_60my8k259=function(){return actualCoverage;};}return actualCoverage;}cov_60my8k259();import LifecycleEnum from"../constants/LifecycleEnum.js";import ContainerHasClassWithInvalidLifecycle from"../errors/ContainerHasClassWithInvalidLifecycle.js";// eslint-disable-next-line no-unused-vars
import FunctionWrapper from"../wrappers/FunctionWrapper.js";// import deepEqual from "../utils/deepEqual.js";
import AbstractContextContainer from"./AbstractContextContainer.js";import DependencyTree from"./helpers/DependencyTree.js";// eslint-disable-next-line no-unused-vars
import DIObjectKey from"./helpers/DIObjectKey.js";import InstanceHelper from"./helpers/InstanceHelper.js";class InvalidDemandedFactoryParent extends Error{constructor(){cov_60my8k259().f[0]++;cov_60my8k259().s[0]++;super("Invalid demanded factory parent. "+"Parent must be an instance of AbstractContextContainer or it's derived class, null or undefined.");}}class DemandedFactoryClassTreeListInvalid extends Error{constructor(){cov_60my8k259().f[1]++;cov_60my8k259().s[1]++;super("DemandedFactory constructor's argument 'classTreeList' is invalid. "+"Argument 'classTreeList' must be an array of DependencyTree instances");}}/** Class representing a DI objects factory for objects with demanded lifecycle
 * @class
 */class DemandedFactory{/**
	 *
	 * @param {AbstractContextContainer} parent - parent container
	 * @param {DependencyTree[]} [classTreeList=[]] - list of di objects dependency tree
	 */constructor(parent,classTreeList=(cov_60my8k259().b[0][0]++,[])){cov_60my8k259().f[2]++;cov_60my8k259().s[2]++;if(!(parent instanceof AbstractContextContainer)){cov_60my8k259().b[1][0]++;cov_60my8k259().s[3]++;throw new InvalidDemandedFactoryParent();}else{cov_60my8k259().b[1][1]++;}cov_60my8k259().s[4]++;if((cov_60my8k259().b[3][0]++,!Array.isArray(classTreeList))||(cov_60my8k259().b[3][1]++,classTreeList.length)&&(cov_60my8k259().b[3][2]++,classTreeList.find(clsTree=>{cov_60my8k259().f[3]++;cov_60my8k259().s[5]++;return!(clsTree instanceof DependencyTree);}))){cov_60my8k259().b[2][0]++;cov_60my8k259().s[6]++;throw new DemandedFactoryClassTreeListInvalid();}else{cov_60my8k259().b[2][1]++;}const classWithInvalidLifecycle=(cov_60my8k259().s[7]++,classTreeList.find(cls=>{cov_60my8k259().f[4]++;cov_60my8k259().s[8]++;return cls.baseNode.lifecycle.id!==LifecycleEnum.Demanded;}));cov_60my8k259().s[9]++;if(classWithInvalidLifecycle){cov_60my8k259().b[4][0]++;cov_60my8k259().s[10]++;throw new ContainerHasClassWithInvalidLifecycle("Demanded",classWithInvalidLifecycle);}else{cov_60my8k259().b[4][1]++;}cov_60my8k259().s[11]++;this.classTreeList=classTreeList;cov_60my8k259().s[12]++;this.#parent=parent;}#parent;#buildInstance(clazzTree){const argumentValues=(cov_60my8k259().s[13]++,[]);cov_60my8k259().s[14]++;if(clazzTree.baseNode.constructor.args.length>0){cov_60my8k259().b[5][0]++;cov_60my8k259().s[15]++;clazzTree.baseNode.constructor.args.forEach(arg=>{cov_60my8k259().f[5]++;const argClazz=(cov_60my8k259().s[16]++,this.getParent().classTreeList.find(clsTree=>{cov_60my8k259().f[6]++;cov_60my8k259().s[17]++;return clsTree.baseNode.name===arg;}));const existedInstance=(cov_60my8k259().s[18]++,argClazz.baseNode.lifecycle.id!==LifecycleEnum.Demanded?(cov_60my8k259().b[6][0]++,this.getParent().getInstance(argClazz.baseNode.name,argClazz.baseNode.lifecycle.id,true)):(cov_60my8k259().b[6][1]++,undefined));cov_60my8k259().s[19]++;if(existedInstance){cov_60my8k259().b[7][0]++;cov_60my8k259().s[20]++;return argumentValues.push(existedInstance);}else{cov_60my8k259().b[7][1]++;}cov_60my8k259().s[21]++;argumentValues.push(this.createInstance(argClazz.baseNode.key));});}else{cov_60my8k259().b[5][1]++;}cov_60my8k259().s[22]++;clazzTree.baseNode.lifecycle.beforeCreate();const instance=(cov_60my8k259().s[23]++,InstanceHelper.createInstance(clazzTree.baseNode,argumentValues));cov_60my8k259().s[24]++;clazzTree.baseNode.lifecycle.afterCreate.bind(instance)();cov_60my8k259().s[25]++;return instance;}/** Adds new di object
	 * @public
	 * @param {DependencyTree} diObjectClazzTree
	 */addDIObject(diObjectClazzTree){cov_60my8k259().f[7]++;cov_60my8k259().s[26]++;if(diObjectClazzTree.baseNode.lifecycle.id!==LifecycleEnum.Demanded){cov_60my8k259().b[8][0]++;cov_60my8k259().s[27]++;throw new ContainerHasClassWithInvalidLifecycle("Demanded",diObjectClazzTree);}else{cov_60my8k259().b[8][1]++;}cov_60my8k259().s[28]++;this.classTreeList.push(diObjectClazzTree);}/** Creates new instance of di object
	 *
	 * @param {DIObjectKey} key
	 * @returns {Object|FunctionWrapper}
	 */createInstance(key){cov_60my8k259().f[8]++;// create new instance and add it in Map
// const clazz = this.classTreeList.find(cls => deepEqual(Symbol.keyFor(cls.baseNode.key.key), Symbol.keyFor(key.key)));
const clazz=(cov_60my8k259().s[29]++,this.classTreeList.find(cls=>{cov_60my8k259().f[9]++;cov_60my8k259().s[30]++;return cls.baseNode.key.key===key.key;}));cov_60my8k259().s[31]++;if(!clazz){cov_60my8k259().b[9][0]++;cov_60my8k259().s[32]++;return undefined;}else{cov_60my8k259().b[9][1]++;}cov_60my8k259().s[33]++;return this.#buildInstance(clazz);}/** Returns context that's a parent container of this SessionContainer
	 *
	 * @returns {ContextContainer}
	 */getParent(){cov_60my8k259().f[10]++;cov_60my8k259().s[34]++;return this.#parent;}}export default DemandedFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,