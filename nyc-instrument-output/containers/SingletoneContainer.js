function cov_2n55ui8quc(){var path="D:\\Programming\\xyz\\dizy\\src\\containers\\SingletoneContainer.js";var hash="d1fe4d20c6bb8910b470f2305980335facd84020";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Programming\\xyz\\dizy\\src\\containers\\SingletoneContainer.js",statementMap:{"0":{start:{line:18,column:2},end:{line:18,column:31}},"1":{start:{line:19,column:36},end:{line:19,column:119}},"2":{start:{line:19,column:64},end:{line:19,column:118}},"3":{start:{line:20,column:2},end:{line:22,column:3}},"4":{start:{line:21,column:3},end:{line:21,column:92}},"5":{start:{line:23,column:2},end:{line:23,column:24}},"6":{start:{line:27,column:14},end:{line:27,column:32}},"7":{start:{line:34,column:2},end:{line:36,column:3}},"8":{start:{line:35,column:3},end:{line:35,column:84}},"9":{start:{line:37,column:2},end:{line:37,column:39}},"10":{start:{line:41,column:2},end:{line:41,column:42}},"11":{start:{line:42,column:19},end:{line:42,column:45}},"12":{start:{line:43,column:2},end:{line:43,column:56}},"13":{start:{line:44,column:2},end:{line:44,column:18}},"14":{start:{line:54,column:2},end:{line:56,column:3}},"15":{start:{line:55,column:3},end:{line:55,column:97}},"16":{start:{line:59,column:2},end:{line:66,column:3}},"17":{start:{line:61,column:4},end:{line:61,column:43}},"18":{start:{line:62,column:4},end:{line:62,column:48}},"19":{start:{line:65,column:3},end:{line:65,column:113}},"20":{start:{line:67,column:2},end:{line:67,column:41}},"21":{start:{line:76,column:2},end:{line:76,column:38}},"22":{start:{line:86,column:18},end:{line:86,column:46}},"23":{start:{line:87,column:2},end:{line:89,column:3}},"24":{start:{line:88,column:3},end:{line:88,column:18}},"25":{start:{line:91,column:16},end:{line:91,column:82}},"26":{start:{line:91,column:49},end:{line:91,column:81}},"27":{start:{line:92,column:2},end:{line:94,column:3}},"28":{start:{line:93,column:3},end:{line:93,column:20}},"29":{start:{line:95,column:2},end:{line:95,column:36}},"30":{start:{line:103,column:2},end:{line:103,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:1},end:{line:17,column:2}},loc:{start:{line:17,column:41},end:{line:24,column:2}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:19,column:55},end:{line:19,column:56}},loc:{start:{line:19,column:64},end:{line:19,column:118}},line:19},"2":{name:"(anonymous_2)",decl:{start:{line:33,column:1},end:{line:33,column:2}},loc:{start:{line:33,column:32},end:{line:38,column:2}},line:33},"3":{name:"(anonymous_3)",decl:{start:{line:52,column:1},end:{line:52,column:2}},loc:{start:{line:52,column:29},end:{line:68,column:2}},line:52},"4":{name:"(anonymous_4)",decl:{start:{line:60,column:28},end:{line:60,column:29}},loc:{start:{line:60,column:41},end:{line:63,column:4}},line:60},"5":{name:"(anonymous_5)",decl:{start:{line:75,column:1},end:{line:75,column:2}},loc:{start:{line:75,column:18},end:{line:77,column:2}},line:75},"6":{name:"(anonymous_6)",decl:{start:{line:84,column:1},end:{line:84,column:2}},loc:{start:{line:84,column:18},end:{line:96,column:2}},line:84},"7":{name:"(anonymous_7)",decl:{start:{line:91,column:40},end:{line:91,column:41}},loc:{start:{line:91,column:49},end:{line:91,column:81}},line:91},"8":{name:"(anonymous_8)",decl:{start:{line:102,column:1},end:{line:102,column:2}},loc:{start:{line:102,column:13},end:{line:104,column:2}},line:102}},branchMap:{"0":{loc:{start:{line:17,column:21},end:{line:17,column:39}},type:"default-arg",locations:[{start:{line:17,column:37},end:{line:17,column:39}}],line:17},"1":{loc:{start:{line:20,column:2},end:{line:22,column:3}},type:"if",locations:[{start:{line:20,column:2},end:{line:22,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:20},"2":{loc:{start:{line:34,column:2},end:{line:36,column:3}},type:"if",locations:[{start:{line:34,column:2},end:{line:36,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:34},"3":{loc:{start:{line:54,column:2},end:{line:56,column:3}},type:"if",locations:[{start:{line:54,column:2},end:{line:56,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:54},"4":{loc:{start:{line:59,column:2},end:{line:66,column:3}},type:"if",locations:[{start:{line:59,column:2},end:{line:66,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:59},"5":{loc:{start:{line:87,column:2},end:{line:89,column:3}},type:"if",locations:[{start:{line:87,column:2},end:{line:89,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:87},"6":{loc:{start:{line:92,column:2},end:{line:94,column:3}},type:"if",locations:[{start:{line:92,column:2},end:{line:94,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:92}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d1fe4d20c6bb8910b470f2305980335facd84020"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2n55ui8quc=function(){return actualCoverage;};}return actualCoverage;}cov_2n55ui8quc();import LifecycleEnum from"../constants/LifecycleEnum.js";import ContainerHasClassWithInvalidLifecycle from"../errors/ContainerHasClassWithInvalidLifecycle.js";import SimpleContainer from"./SimpleContainer.js";import DIObjectKey from"./helpers/DIObjectKey.js";import InstancesMap from"./helpers/InstancesMap.js";/** Class representing simple DI container with singletone lifecycle
 * @class
 * @extends SimpleContainer
 */class SingletoneContainer extends SimpleContainer{/**
	 *
	 * @param {AbstractContextContainer} parent - parent container
	 * @param {DependencyTree[]} [classTreeList=[]] - list of di objects dependency tree
	 */constructor(parent,classTreeList=(cov_2n55ui8quc().b[0][0]++,[])){cov_2n55ui8quc().f[0]++;cov_2n55ui8quc().s[0]++;super(parent,classTreeList);const classWithInvalidLifecycle=(cov_2n55ui8quc().s[1]++,classTreeList.find(cls=>{cov_2n55ui8quc().f[1]++;cov_2n55ui8quc().s[2]++;return cls.baseNode.lifecycle.id!==LifecycleEnum.Singletone;}));cov_2n55ui8quc().s[3]++;if(classWithInvalidLifecycle){cov_2n55ui8quc().b[1][0]++;cov_2n55ui8quc().s[4]++;throw new ContainerHasClassWithInvalidLifecycle("Singletone",classWithInvalidLifecycle);}else{cov_2n55ui8quc().b[1][1]++;}cov_2n55ui8quc().s[5]++;this.#parent=parent;}#parent;#instances=(cov_2n55ui8quc().s[6]++,new InstancesMap());/** Adds new di object
	 * @public
	 * @param {DependencyTree} diObjectClazzTree
	 */addDIObject(diObjectClazzTree){cov_2n55ui8quc().f[2]++;cov_2n55ui8quc().s[7]++;if(diObjectClazzTree.baseNode.lifecycle.id!==LifecycleEnum.Singletone){cov_2n55ui8quc().b[2][0]++;cov_2n55ui8quc().s[8]++;throw new ContainerHasClassWithInvalidLifecycle("Singletone",diObjectClazzTree);}else{cov_2n55ui8quc().b[2][1]++;}cov_2n55ui8quc().s[9]++;super.addDIObject(diObjectClazzTree);}#buildInstance(clazz){cov_2n55ui8quc().s[10]++;clazz.baseNode.lifecycle.beforeCreate();const instance=(cov_2n55ui8quc().s[11]++,this._buildInstance(clazz));cov_2n55ui8quc().s[12]++;clazz.baseNode.lifecycle.afterCreate.bind(instance)();cov_2n55ui8quc().s[13]++;return instance;}/** Adds instance to instancesMap
	 * @protected
	 * @param {DIObjectKey} key
	 * @param {Object|FunctionWrapper} instance
	 */_addInstance(key,instance){cov_2n55ui8quc().f[3]++;cov_2n55ui8quc().s[14]++;// check that key is valid (there is a classTree node with that key)
if(!(key instanceof DIObjectKey)){cov_2n55ui8quc().b[3][0]++;cov_2n55ui8quc().s[15]++;throw new Error(`Invalid key type. Argument 'key' must be an instance of DIObjectKey class.`);}else{cov_2n55ui8quc().b[3][1]++;}// delete this rule, because we need to access adding instance from outside
// don't delete this rule, because we don't need to do ServiceLocator
cov_2n55ui8quc().s[16]++;if(!this.classTreeList.find(clsTree=>{cov_2n55ui8quc().f[4]++;cov_2n55ui8quc().s[17]++;console.log(clsTree.baseNode.key,key);cov_2n55ui8quc().s[18]++;return clsTree.baseNode.key.key===key.key;})){cov_2n55ui8quc().b[4][0]++;cov_2n55ui8quc().s[19]++;throw new Error(`ClassTree with key ${key.key} in '${this.getParent().name}/SingletoneContainer' not found.`);}else{cov_2n55ui8quc().b[4][1]++;}cov_2n55ui8quc().s[20]++;this.#instances.set(key.key,instance);}/** Returns boolean indicating whether an element with the specified key exists or not.
	 *
	 * @param {DIObjectKey} key
	 * @returns {boolean}
	 */hasInstance(key){cov_2n55ui8quc().f[5]++;cov_2n55ui8quc().s[21]++;return this.#instances.has(key.key);}/**
	 *
	 * @param {DIObjectKey} key
	 * @returns {Object|FunctionWrapper}
	 */getInstance(key){cov_2n55ui8quc().f[6]++;// const existed = this.#instances.get(key.key);
const existed=(cov_2n55ui8quc().s[22]++,this.#instances.get(key.key));cov_2n55ui8quc().s[23]++;if(existed){cov_2n55ui8quc().b[5][0]++;cov_2n55ui8quc().s[24]++;return existed;}else{cov_2n55ui8quc().b[5][1]++;}// const clazz = this.classTreeList.find(cls => deepEqual(Symbol.keyFor(cls.baseNode.key.key), Symbol.keyFor(key.key)));
const clazz=(cov_2n55ui8quc().s[25]++,this.classTreeList.find(cls=>{cov_2n55ui8quc().f[7]++;cov_2n55ui8quc().s[26]++;return cls.baseNode.key.key===key.key;}));cov_2n55ui8quc().s[27]++;if(!clazz){cov_2n55ui8quc().b[6][0]++;cov_2n55ui8quc().s[28]++;return undefined;}else{cov_2n55ui8quc().b[6][1]++;}cov_2n55ui8quc().s[29]++;return this.#buildInstance(clazz);}/** Returns context that's a parent container of this SessionContainer
	 *
	 * @returns {ContextContainer}
	 */getParent(){cov_2n55ui8quc().f[8]++;cov_2n55ui8quc().s[30]++;return this.#parent;}}export default SingletoneContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,